<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>arch linux on Datafortress.cloud</title><link>https://datafortress.cloud/tags/arch-linux/</link><description>Recent content in arch linux on Datafortress.cloud</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor/><webMaster/><lastBuildDate>Mon, 06 Jul 2020 07:10:46 +0200</lastBuildDate><atom:link href="https://datafortress.cloud/tags/arch-linux/index.xml" rel="self" type="application/rss+xml"/><item><title>How To - Installing Arch Linux the easy way with encrypted drives</title><link>https://datafortress.cloud/blog/howto-install-arch-linux-the-easy-way/</link><pubDate>Mon, 06 Jul 2020 07:10:46 +0200</pubDate><author>Justin Guese</author><guid>https://datafortress.cloud/blog/howto-install-arch-linux-the-easy-way/</guid><description>
&lt;h1 id="installing-arch-linux-the-easy-way-with-encrypted-drives-for-deep-learning">Installing Arch Linux the easy way with encrypted drives for Deep Learning&lt;/h1>
&lt;h2 id="the-benefits-of-arch-linux">The benefits of Arch Linux&lt;/h2>
&lt;p>In my other post, &lt;a href="//www.datafortress.cloud/blog/howto-arch-linux-deeplearning-workstation/">“How To: Ditching Ubuntu in favor of Arch Linux for a Deep Learning Workstation”&lt;/a>, I have been explaining why I switched from Ubuntu to Arch Linux for my Machine Learning workstation. Summarized it is mostly because of speed, because Arch is way closer to the hardware and therefore way faster, less bloatware and therefore less RAM usage which I need to machine learning, and the amazing pacman and AUR packages which are fast and easy to install.&lt;/p>
&lt;p>In Ubuntu, for example, it is quite hard to get TensorFlow and CUDA working for Deep Learning, as the Debian package structure is different and the installation slower compared to Arch. In Arch, dependencies are handled nicely, and packages are not that abstracted as Arch is basically the “pure” Linux kernel itself.&lt;/p>
&lt;p>Additionally packages are coming out way faster, and the ArchWiki is said to be the most extensive documentation there is for an operating system.&lt;/p>
&lt;p>The motto of Arch can be described as “Customize everything, and be as fast as possible”, whilst Ubuntu’s motto would be “Make the installation and usage as easy as possible for new users”. Now, I am not saying that Ubuntu is bad, because the community is huge, and it is the perfect Distro to start your journey into the world of Linux, but once you are more used to Linux and need more speed, Arch might be the best next step.&lt;/p>
&lt;p>I am at least happy with Arch, as it is way faster than everything I have seen before, and I can customize everything.&lt;/p>
&lt;p>I have been thinking about providing an iso or img for my Deep Learning build for an easy install. If you are interested please comment or send me a message.&lt;/p>
&lt;p>Additionally, if you are fine with a slight abstraction layer &lt;a href="//manjaro.org/">Manjaro Arch&lt;/a> might be a good choice for you. It is basically Arch, but made easy and user-friendly. I loved it, but moved to Arch as Manjaro uses their own packages, which are still good, but not the same as the “pure” Arch packages. If you are not a power-user this might be the choice for you.&lt;/p>
&lt;h2 id="how-to-install-arch-linux-the-easy-way">How to Install Arch Linux the easy way&lt;/h2>
&lt;p>Whilst the &lt;a href="//wiki.archlinux.org/index.php/installation_guide">introductory guide&lt;/a> provided by arch is quite good already, it can be confusing for newcomers. That is why I have decided to write my own tutorial.&lt;/p>
&lt;p>My goal has been to install Arch with encrypted drives, as I need to secure the data at rest for my clients.&lt;/p>
&lt;h3 id="1-downloading-the-arch-linux-image">1. Downloading the Arch Linux Image&lt;/h3>
&lt;p>Head over to &lt;a href="https://www.archlinux.org/download/">https://www.archlinux.org/download/&lt;/a> and download the image.&lt;/p>
&lt;p>Write it to an USB stick. E.g. (but you can use your own program) for:&lt;/p>
&lt;p>Linux:&lt;/p>
&lt;blockquote>
&lt;p>dd if=ISOFILE of=/dev/sdX status=progress&lt;/p>
&lt;/blockquote>
&lt;p>Where the sdX is your usb stick. Check it with “lsblk”&lt;/p>
&lt;p>Windows / Mac:
I liked to use Etcher &lt;a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/&lt;/a>&lt;/p>
&lt;p>Boot into the USB stick using your Boot menu (F11, F12 in most cases)&lt;/p>
&lt;h3 id="2-first-setup-in-live-iso">2. First setup in Live ISO&lt;/h3>
&lt;p>Once you are in the Live ISO of Arch, you should see the basic command line of Arch.&lt;/p>
&lt;p>&lt;strong>Not an US keyboard&lt;/strong>? Load your keys with:&lt;/p>
&lt;blockquote>
&lt;p>loadkeys KEYMAP&lt;/p>
&lt;/blockquote>
&lt;p>Where Keymap is your locale. Get your locale with&lt;/p>
&lt;blockquote>
&lt;p>localectl list-keymaps | grep -i SEARCHTERM&lt;/p>
&lt;/blockquote>
&lt;p>E.g. using the above command with SEARCHTERM = Germany returns de-latin1, for which the loadkeys command is:&lt;/p>
&lt;blockquote>
&lt;p>loadkeys de-latin1&lt;/p>
&lt;/blockquote>
&lt;p>(Optional) If you do not have ethernet you might have to connect to your wifi with the following commands. Replace WIFINETWORK and WIFIPASSWORD with your wifi name and password.&lt;/p>
&lt;blockquote>
&lt;p>wpa_passphrase &amp;lsquo;WIFINETWORK’ &amp;lsquo;WIFIPASSWORD&amp;rsquo; &amp;raquo; /etc/wpa_supplicant/wpa_supplicant.conf &lt;br>
wpa_supplicant -Bc /etc/wpa_supplicant/wpa_supplicant.conf -i &amp;lsquo;wlan0&amp;rsquo; &lt;br>
If the second command does not work your wifi device name might be different. You can check it with “ifconfig”
dhclient&lt;/p>
&lt;/blockquote>
&lt;p>Check your connection with curling a website. If the response looks like HTML you are connected, if it says something along the lines of “404”, “timed out” or “no connection” repeat the above steps and watch for typos.&lt;/p>
&lt;blockquote>
&lt;p>curl &lt;a href="https://www.datafortress.cloud">www.datafortress.cloud&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="2-partitioning-the-drives">2. Partitioning the drives&lt;/h3>
&lt;p>This is the most difficult step, so once you are done with it you are almost done! I chose the more advanced version where the drive is completely encrypted for advanced security, but feel free to use the “&lt;a href="//wiki.archlinux.org/index.php/Partitioning">standard method&lt;/a>” instead.&lt;/p>
&lt;p>This guide will assume you are planning to wipe your whole drive. So be sure that all data is backed up. Of course, a dual-boot with windows or so is possible as well, but I will explain that in another guide.&lt;/p>
&lt;p>The plan is to have two partitions:
First partition: EFI boot drive - which tells your PC how to boot into Arch
Second partition: Completely encrypted drive with “sub”-drives containing the swap file, the root folder and a separate /home drive for security.
Why three partitions on the second drive? Let’s say you mess up your root installation. In that case your home folder with your documents, settings and so on will be on a separate partition and can easily be reused in a new install. Meaning you could install a fresh new Arch install in the root partition, and just “reuse” your home folder. Nice.&lt;/p>
&lt;h4 id="step-1-get-the-name-of-your-drive">Step 1: Get the name of your Drive&lt;/h4>
&lt;blockquote>
&lt;p>lbslk -lh&lt;/p>
&lt;/blockquote>
&lt;p>This shows you all connected drives. Usually your main drive should be called /dev/sda and your USB stick /dev/sdb.&lt;/p>
&lt;p>&lt;strong>Check if sda is really your main drive according to the GB storage capacity and everything. If you simply copy and paste the following commands with sda you might wipe the wrong drive!!&lt;/strong>
That is why I will name the device sdX in the following paragraphs, but replace the X with your device number (a,b,c, …). Some drives are having different names, just compare and replace accordingly.&lt;/p>
&lt;h4 id="step-2-partition">Step 2: Partition&lt;/h4>
&lt;p>Start gdisk&lt;/p>
&lt;blockquote>
&lt;p>gdisk /dev/sdX&lt;/p>
&lt;/blockquote>
&lt;p>Boot EFI Drive Setup&lt;/p>
&lt;ol>
&lt;li>Type ‘o’ to create a partition table&lt;/li>
&lt;li>Type ‘n’ for a new partition&lt;/li>
&lt;li>Enter&lt;/li>
&lt;li>Enter&lt;/li>
&lt;li>+256M&lt;/li>
&lt;li>EF00
This will create a 256 mb partition with the EFI format that we need for booting&lt;/li>
&lt;/ol>
&lt;p>Encrypted Arch Drive setup&lt;/p>
&lt;ol>
&lt;li>Type ‘n’ to create a new partition&lt;/li>
&lt;li>Enter&lt;/li>
&lt;li>Enter&lt;/li>
&lt;li>Enter&lt;/li>
&lt;li>8309&lt;/li>
&lt;/ol>
&lt;p>Check if everything looks right with pressing ‘p’. It should look like this:&lt;/p>
&lt;blockquote>
&lt;p>Number Start (sector) End (sector) Size Code Name &lt;br>
1 2048 1050623 256.0 MiB EF00 EFI System &lt;br>
2 1050624 242187466 115.0 GiB 8309 Linux LUKS&lt;/p>
&lt;/blockquote>
&lt;p>Looks good? Press ‘w’ to write changes to disk.&lt;/p>
&lt;h3 id="3-create-the-encrypted-filesystems">3. Create the encrypted filesystems&lt;/h3>
&lt;p>The partitions are empty right now. Next we will create the filesystems and encrypted “sub”-partitions. Remember to replace the X with your drive number (usually a).&lt;/p>
&lt;blockquote>
&lt;p>cryptsetup luksFormat /dev/sdX2 &lt;br>
cryptsetup open /dev/sdX2 cryptlvm &lt;br>
pvcreate /dev/mapper/cryptlvm &lt;br>
vgcreate datafortress /dev/mapper/cryptlvm&lt;/p>
&lt;/blockquote>
&lt;p>Feel free to replace the following disk sizes in front of the “G” for Gigabyte with your desired size. For Deep Learning Swap should be 32 Gb, for other cases around the size of your RAM. I recommend the root system to be 40Gb, but the minimum should be 10Gb.
You can replace datafortress with anything, or leave it as is to be the cool kid in town.&lt;/p>
&lt;blockquote>
&lt;p>lvcreate -L 16G datafortress -n swap &lt;br>
lvcreate -L 40G datafortress -n root &lt;br>
lvcreate -l +100%FREE datafortress -n home&lt;/p>
&lt;/blockquote>
&lt;p>Create filesystems&lt;/p>
&lt;blockquote>
&lt;p>mkfs.vat -F32 /dev/sdX1 &lt;br>
mkfs.ext4 /dev/mapper/datafortress-root &lt;br>
mkfs.ext4 /dev/mapper/datafortress-home &lt;br>
mkswap /dev/mapper/datafortress-swap&lt;/p>
&lt;/blockquote>
&lt;p>Mount them&lt;/p>
&lt;blockquote>
&lt;p>mount /dev/mapper/datafortress-root /mnt &lt;br>
mkdir /mnt/home &lt;br>
mkdir /mnt/boot &lt;br>
mount /dev/mapper/datafortress-home /mnt/home &lt;br>
mount /dev/sdX1 /mnt/boot &lt;br>
swapon /dev/mapper/datafortress-swap&lt;/p>
&lt;/blockquote>
&lt;h3 id="4-install-base-linux">4. Install base Linux&lt;/h3>
&lt;p>Before installing it is recommended to update your mirrorlist such that packages are downloaded from the closest mirrors. &lt;a href="//www.datafortress.cloud/blog/howto-arch-linux-deeplearning-workstation/">Head over to my other article and search for “reflector” for an instruction on how to do that&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>pacstrap /mnt base base-devel linux linux-firmware nano&lt;/p>
&lt;/blockquote>
&lt;h3 id="5-install-fstab">5. Install Fstab&lt;/h3>
&lt;p>Fstab is basically an instruction how to mount your drives. Just copy paste it for now.&lt;/p>
&lt;blockquote>
&lt;p>genfstab -U /mnt &amp;raquo; /mnt/etc/fstab&lt;/p>
&lt;/blockquote>
&lt;h3 id="6-last-polishing-touches">6. Last polishing touches&lt;/h3>
&lt;p>We are going to chroot into our mount, which is basically like running sudo in our system.&lt;/p>
&lt;blockquote>
&lt;p>arch-chroot /mnt &lt;br>
ln -s /usr/share/zoneinfo/REGION/CITY /etc/localtime&lt;/p>
&lt;/blockquote>
&lt;p>Where Region is your region (just use tab to see the options if you types the /usr/…./zoneinfo/, like Europe, and CITY your city, like Vienna.&lt;/p>
&lt;blockquote>
&lt;p>hwclock &amp;ndash;systohc&lt;/p>
&lt;/blockquote>
&lt;p>Set your hostname. The funny part when installing Arch is you get to do things Ubuntu and others do for you. Set the hostname for your device, e.g. if you are going to ssh into your device later you do not have to type an IP, but can use this name instead. E.g. “ssh user@hunneybunney” could be way nicer to remember than 192.168.0.231.&lt;/p>
&lt;blockquote>
&lt;p>echo NAME &amp;gt; /etc/hostname&lt;/p>
&lt;/blockquote>
&lt;p>Next we are setting our locale, basically the system language. Open the file in nano and search for your language code. Use the UTF-8 version if possible. Searching with nano is possible using Strg + W. &lt;a href="//www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/">Nano tutorial&lt;/a>.
E.g. I wanted to have German and English (US), that is why I uncommented en_US.UTF-8 UTF-8 and de_DE.UTF-8 UTF-8&lt;/p>
&lt;blockquote>
&lt;p>nano /etc/locale.gen&lt;/p>
&lt;/blockquote>
&lt;p>Generate locales&lt;/p>
&lt;blockquote>
&lt;p>locale-gen&lt;/p>
&lt;/blockquote>
&lt;p>(Optional) Now if you are using a non-US Keyboard add your keymap:&lt;/p>
&lt;blockquote>
&lt;p>echo KEYMAP &amp;gt; /etc/vconsole.conf&lt;/p>
&lt;/blockquote>
&lt;p>Use the Keymap from the beginning, like de-latin1&lt;/p>
&lt;p>Next install some software. If you already know pacman packages you want to install, do it now. I recommend just using the minimum first and then continue installation of packages if everything works fine.&lt;/p>
&lt;p>&lt;strong>Minimum&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>pacman -Syu &lt;br>
pacman -S wpa_supplicant dhclient lvm2 dialog&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Installing a desktop environment&lt;/strong>
Feel free to install a desktop environment already, which allows you to have a GUI of everything.&lt;/p>
&lt;p>Install a display manager&lt;/p>
&lt;blockquote>
&lt;p>pacman -S lightdm&lt;/p>
&lt;/blockquote>
&lt;p>Now the benefits of Arch are choosing your own Desktop environment. For the looks choose Gnome, but it will be RAM hungry, for efficiency choose Xfce.&lt;/p>
&lt;p>&lt;strong>Only install ONE of the following&lt;/strong>&lt;/p>
&lt;p>To install GNOME:&lt;/p>
&lt;blockquote>
&lt;p>pacman -S gnome gnome-extra&lt;/p>
&lt;/blockquote>
&lt;p>To install Cinnamon:&lt;/p>
&lt;blockquote>
&lt;p>pacman -S cinnamon nemo-fileroller&lt;/p>
&lt;/blockquote>
&lt;p>To install XFCE:&lt;/p>
&lt;blockquote>
&lt;p>pacman -S xfce4 xfce4-goodies&lt;/p>
&lt;/blockquote>
&lt;p>To install KDE:&lt;/p>
&lt;blockquote>
&lt;p>pacman -S plasma&lt;/p>
&lt;/blockquote>
&lt;p>To install MATE:&lt;/p>
&lt;blockquote>
&lt;p>pacman -S mate mate-extra&lt;/p>
&lt;/blockquote>
&lt;h3 id="7-adding-users">7. Adding users&lt;/h3>
&lt;p>I recommend using different passwords for the root and default user.&lt;/p>
&lt;blockquote>
&lt;p>useradd -m -G wheel ‘USERNAME’ &lt;br>
passwd ‘USERNAME’&lt;/p>
&lt;/blockquote>
&lt;p>Create a password for the root user&lt;/p>
&lt;blockquote>
&lt;p>passwd&lt;/p>
&lt;/blockquote>
&lt;p>You will login with your default user. If you need to do administrative stuff you can switch users with “su - root”&lt;/p>
&lt;h3 id="8-boot-configuration">8. Boot configuration&lt;/h3>
&lt;p>Now there are a lot of boot managers, but I liked the systemd-boot loader the most. &lt;a href="//wiki.archlinux.org/index.php/Category:Boot_loaders">Feel free to choose another one&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>nano /etc/mkinitcpio.conf&lt;/p>
&lt;/blockquote>
&lt;p>Search for the HOOKS line and edit it accordingly. Order matters!&lt;/p>
&lt;blockquote>
&lt;p>HOOKS=(base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems resume fsck)&lt;/p>
&lt;/blockquote>
&lt;p>Close and Save the file (Strg + X, y)&lt;/p>
&lt;blockquote>
&lt;p>mkinitcpio -p linux &lt;br>
bootctl install&lt;/p>
&lt;/blockquote>
&lt;p>Edit your boot entries&lt;/p>
&lt;p>You will need the partition id of the encrypted drive. Usually this will be /dev/sda2, but can be different. It will not be the first 256mb drive, as this is the boot partition.&lt;/p>
&lt;p>Check for the name and note it down, most likely it is /dev/sda2&lt;/p>
&lt;blockquote>
&lt;p>lsblk -lh&lt;/p>
&lt;/blockquote>
&lt;p>Then look for the UUID string in the output of following command at the device id /dev/sdX2&lt;/p>
&lt;blockquote>
&lt;p>blkid&lt;/p>
&lt;/blockquote>
&lt;p>You can try the same command with a filter as well:&lt;/p>
&lt;blockquote>
&lt;p>blkid | grep UUID=&lt;/p>
&lt;/blockquote>
&lt;p>Example UUID: 727cac18-044b-4504-87f1-a5aefa774bda&lt;/p>
&lt;blockquote>
&lt;p>nano /boot/loader/entries/arch.conf
Add the following:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>title ArchLinux &lt;br>
linux /vmlinuz-linux &lt;br>
initrd /initramfs-linux.img &lt;br>
options cryptdevice=UUID=&lt;!-- raw HTML omitted -->:lvm:allow-discards resume=/dev/mapper/datafortress-swap root=/dev/mapper/datafortress-root rw quiet&lt;/p>
&lt;/blockquote>
&lt;p>Remember to replace datafortress with the id you chose if you changed it. Otherwise leave as is.&lt;/p>
&lt;h3 id="9-locking-up">9. Locking up&lt;/h3>
&lt;p>DONE! Now reboot, remove the USB stick and hope everything worked.&lt;/p>
&lt;blockquote>
&lt;p>exit &lt;br>
umount -R /mnt &lt;br>
reboot&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>&lt;a href="//www.datafortress.cloud/blog/howto-arch-linux-deeplearning-workstation/">I recommend setting up LTS kernels, as they are more stable, and update the mirrorlist. Check my guide on “creating an Arch Linux Deep Learning station” for more information on how to do that&lt;/a>.&lt;/strong>&lt;/p></description></item><item><title>How To - Ditching Ubuntu in favor of Arch Linux for a Deep Learning Workstation</title><link>https://datafortress.cloud/blog/howto-arch-linux-deeplearning-workstation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>Justin Guese</author><guid>https://datafortress.cloud/blog/howto-arch-linux-deeplearning-workstation/</guid><description>
&lt;h1 id="how-to-ditching-ubuntu-in-favor-of-arch-linux-for-a-deep-learning-workstation">How To: Ditching Ubuntu in favor of Arch Linux for a Deep Learning Workstation&lt;/h1>
&lt;h2 id="why-should-i-ditch-ubuntu">Why should I ditch Ubuntu?&lt;/h2>
&lt;p>Most of you might be using Ubuntu for their workstations, and that is fine for the more inexperienced users. One of the issues I had with Ubuntu and the Tensorflow/CUDA though, has been that handling the different drivers and versions of CUDA, cudnn, TensorFlow, and so on has been quite a struggle. I’m not sure about you, but once I had a working Tensorflow 1.15 or 2.0 environment, I usually did not touch it anymore being scared to mess up this holy configuration.&lt;/p>
&lt;p>Working with different programs it would be nice to have a way of switching between the two most used TensorFlow versions of 1.15 and 2.0 like you can do with Google Colab in a single command, but installing a different TensorFlow version usually messed up my system again.&lt;/p>
&lt;p>Additionally, Arch has always been on my To-Do list, as it is the most “barebone” Linux distro you can get, meaning you are working way closer on the hardware compared to “higher abstractions” like Ubuntu. In their own words, Ubuntu is built to “work out of the box and make the installation process as easy as possible for new users”, whilst the motto of Arch Linux is “customize everything”.
Being way closer to the hardware Arch is insanely faster compared to Ubuntu (and miles ahead of Windows), for the cost of more Terminal usage.&lt;/p>
&lt;p>When I have been using Arch in the past weeks, RAM usage usually halved compared to Ubuntu, and installing Machine Learning packages is a breeze. I can have both TensorFlow 1.15 and 2.0 working together, switching the versions with Anaconda environments. Also, the system works quite stable, as I am using the LTS (long term support) kernels of Linux, and usually updates to the famous AUR (user-made packages in Arch) are coming out a month ahead of the Debian (Ubuntu) packages.&lt;/p>
&lt;p>All in all, I can only recommend setting up an Arch Linux Deep Learning station as it is:&lt;/p>
&lt;ol>
&lt;li>Faster, like packages will install super fast, deep learning is supercharged, &amp;hellip;&lt;/li>
&lt;li>More stable&lt;/li>
&lt;li>Easier to switch between TensorFlow versions
compared to Ubuntu.&lt;/li>
&lt;/ol>
&lt;p>I will split the how-to in two parts, the first one being “How to I install Arch Linux” and the second one being “How to install the Deep Learning workstation packages”.&lt;/p>
&lt;p>For the general &lt;a href="//www.datafortress.cloud/blog/howto-install-arch-linux-the-easy-way/">“How to install Arch Linux”, head over to this article&lt;/a>.&lt;/p>
&lt;p>If Arch is too complex for now, you could try out &lt;a href="//manjaro.org/">Manjaro&lt;/a>, which is a user-friendly version of Arch, even though I can not guarantee that all packages will work the same, as they are slightly different. All in all it should work the same though.&lt;/p>
&lt;p>I was thinking about creating a ready to install Image (iso or img), if enough people are interested leave a comment below or message me!&lt;/p>
&lt;h2 id="installing-the-deep-learning-tensorflow-cuda-cudnn-anaconda-setup-on-a-fresh-arch-linux-installation">Installing the Deep Learning (TensorFlow, CUDA, CUDNN, Anaconda) setup on a fresh Arch Linux installation&lt;/h2>
&lt;p>Once you are &lt;a href="//www.datafortress.cloud/blog/howto-install-arch-linux-the-easy-way/">done with the Arch installation (phew!)&lt;/a>, let us first change some settings such that our system works more stable.&lt;/p>
&lt;h3 id="1-switching-to-the-fastest-mirrors">1. Switching to the fastest mirrors&lt;/h3>
&lt;p>Software is downloaded from so-called “mirrors”, which are servers containing all the Arch libraries. If not done automatically, it could happen that your servers are not optimized yet. Therefore, we are going to install a small tool that finds and saves the fastest servers called “reflector”&lt;/p>
&lt;p>Install reflector using&lt;/p>
&lt;blockquote>
&lt;p>sudo pacman -S reflector&lt;/p>
&lt;/blockquote>
&lt;p>Find and download the best servers&lt;/p>
&lt;blockquote>
&lt;p>reflector &amp;ndash;verbose -l 20 -n 20 &amp;ndash;sort rate &amp;ndash;save /etc/pacman.d/mirrorlist&lt;/p>
&lt;/blockquote>
&lt;p>Check the output if it makes sense, e.g. if the domains are close to your location. If not, you could add the country tag to get more precise results, e.g. for Germany and Austria:&lt;/p>
&lt;blockquote>
&lt;p>reflector -c “AT,DE” &amp;ndash;verbose -l 20 -n 20 &amp;ndash;sort rate &amp;ndash;save /etc/pacman.d/mirrorlist&lt;/p>
&lt;/blockquote>
&lt;p>Update your installation&lt;/p>
&lt;blockquote>
&lt;p>sudo pacman -Syyu&lt;/p>
&lt;/blockquote>
&lt;h3 id="2-changing-the-desktop-environment">2. Changing the Desktop Environment&lt;/h3>
&lt;p>If you are using Manjaro or chose the “Gnome” Desktop environment as you know it from Ubuntu, it might be worth it to think about changing it as Gnome is known to eat more RAM than Chrome, and we surely need RAM in our Deep Learning setup.&lt;/p>
&lt;p>If you like Gnome, feel free to skip this step. Otherwise, I can recommend the Xfce desktop as it is a good combination of lightweight and full of features.&lt;/p>
&lt;p>Download Xfce&lt;/p>
&lt;blockquote>
&lt;p>sudo pacman -S xfce4 xfce4-goodies lxdm&lt;/p>
&lt;/blockquote>
&lt;p>Lxdm is a display manager that allows you to use multiple desktops.&lt;/p>
&lt;p>Log out of your current session and press Alt + F2 (or Alt + F3 if it does not work) to get a terminal. First disable Gnome and afterward “activate” Xfce:&lt;/p>
&lt;p>Deactivate and uninstall gnome:&lt;/p>
&lt;blockquote>
&lt;p>sudo systemctl disable gdm &lt;br>
sudo pacman -R gnome gnome-extras&lt;/p>
&lt;/blockquote>
&lt;p>Activate Xfce&lt;/p>
&lt;blockquote>
&lt;p>sudo systemctl enable lxdm &lt;br>
sudo systemctl start lxdm&lt;/p>
&lt;/blockquote>
&lt;p>If the new Xfce desktop does open just login and explore, if not try to reboot (sudo reboot). If that does not help proceed to crying and rolling on the floor, and send me a message or comment afterward.&lt;/p>
&lt;h3 id="3-installing-the-lts-long-term-support-linux-kernels-for-better-stability">3. Installing the LTS (long term support) Linux kernels for better stability&lt;/h3>
&lt;p>Arch is famous for being really close to the current Linux kernels, which is good if you always want the newest packages and Linux features, but a bad idea if you are building a Deep Learning Workstation.&lt;/p>
&lt;p>That is why I switched to the LTS kernels, which are basically kernels that receive more support and are more stable than the newer versions of the Linux Kernel.&lt;/p>
&lt;p>Luckily switching kernels is super easy in Arch. First we will download the kernels, and afterward tell our boot manager which kernel to choose.&lt;/p>
&lt;p>First download the LTS kernels:&lt;/p>
&lt;blockquote>
&lt;p>sudo pacman -S linux-lts linux-lts-headers&lt;/p>
&lt;/blockquote>
&lt;p>Have a look at your current kernel versions:&lt;/p>
&lt;blockquote>
&lt;p>ls -lsha /boot&lt;/p>
&lt;/blockquote>
&lt;p>One kernel should be named vmlinuz-linux.img and initramfs-linux.img (your current versions) and the LTS ones the same with -lts at the end.&lt;/p>
&lt;p>If you are seeing two kernels you can now proceed to delete the old kernels:&lt;/p>
&lt;blockquote>
&lt;p>sudo pacman -R linux&lt;/p>
&lt;/blockquote>
&lt;p>Now a more advanced part is that you will need to tell your bootloader which kernel to choose. The question is which bootloader you are using, but in most cases it is Grub. If you followed my Arch installation tutorial your bootloader is systemd-boot.&lt;/p>
&lt;p>My recommendation is try the Grub instructions, and if that does not work proceed to the others.&lt;/p>
&lt;h4 id="changing-the-grub-bootloader-for-the-lts-linux-kernels">Changing the Grub bootloader for the LTS linux kernels&lt;/h4>
&lt;blockquote>
&lt;p>grub-mkconfig -o /boot/grub/grub.cfg&lt;/p>
&lt;/blockquote>
&lt;p>If you see an error proceed to the next bootloader, otherwise reboot (sudo reboot).&lt;/p>
&lt;h4 id="changing-the-syslinux-bootloader-for-the-lts-linux-kernels">Changing the syslinux bootloader for the LTS linux kernels&lt;/h4>
&lt;p>Edit the config file:&lt;/p>
&lt;blockquote>
&lt;p>sudo nano /boot/syslinux/syslinux.cfg&lt;/p>
&lt;/blockquote>
&lt;p>Simply add “-lts” to the vmlinuz-linux.img and initramfs-linux.img, such that they are vmlinuz-linux-lts.img and initramfs-linux-lts.img&lt;/p>
&lt;h4 id="changing-the-systemd-boot-bootloader-for-the-lts-linux-kernels">Changing the systemd-boot bootloader for the LTS linux kernels&lt;/h4>
&lt;p>If you are coming from my Arch installation guide, this is your bootloader.&lt;/p>
&lt;p>Edit the config file:&lt;/p>
&lt;blockquote>
&lt;p>sudo nano /boot/loader/entries/arch.conf&lt;/p>
&lt;/blockquote>
&lt;p>Simply add “-lts” to the vmlinuz-linux.img and initramfs-linux.img, such that they are vmlinuz-linux-lts.img and initramfs-linux-lts.img&lt;/p>
&lt;h3 id="4-installing-yay-an-easy-way-to-install-aur-packages">4. Installing yay, an easy way to install AUR packages&lt;/h3>
&lt;p>You should prefer to use the ultra-fast pacman to install most packages, but an amazing thing about Arch is that users create millions of custom packages that are super easy to install. You can basically find any program you can think of in this repo.&lt;/p>
&lt;p>Install git SVC&lt;/p>
&lt;blockquote>
&lt;p>sudo pacman -S git &lt;br>
mkdir ~/tmp &lt;br>
git clone &lt;a href="https://aur.archlinux.org/yay-git.git">https://aur.archlinux.org/yay-git.git&lt;/a> ~/tmp/yay &lt;br>
cd ~/tmp/yay &lt;br>
makepkg -si&lt;/p>
&lt;/blockquote>
&lt;p>Now you can browse all the nice AUR packages in &lt;a href="https://aur.archlinux.org/packages/">https://aur.archlinux.org/packages/&lt;/a> or just go for it and type:&lt;/p>
&lt;blockquote>
&lt;p>yay -S [PACKAGE]&lt;/p>
&lt;/blockquote>
&lt;p>To install it.&lt;/p>
&lt;h3 id="5-finally-the-real-cuda-cudnn-anaconda-installation-running-both-tensorflow-115-and-20">5. Finally, the real cuda, cudnn, anaconda installation running both TensorFlow 1.15 and 2.0&lt;/h3>
&lt;p>Install Nvidia drivers, cuda, cudnn with a simple command&lt;/p>
&lt;blockquote>
&lt;p>sudo pacman -S nvidia nvidia-utils cuda cudnn&lt;/p>
&lt;/blockquote>
&lt;p>This takes some time, so grab a coffee or proceed with the next steps&lt;/p>
&lt;p>Download Anaconda, I like Miniconda:&lt;/p>
&lt;blockquote>
&lt;p>wget &lt;a href="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh">https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&lt;/a> ~/&lt;/p>
&lt;/blockquote>
&lt;p>Make it executable and install&lt;/p>
&lt;blockquote>
&lt;p>cd ~/ &lt;br>
chmod +x ./Miniconda*.sh &lt;br>
./Miniconda*.sh&lt;/p>
&lt;/blockquote>
&lt;p>Just leave everything as default.&lt;/p>
&lt;blockquote>
&lt;p>source ./bash_profile&lt;/p>
&lt;/blockquote>
&lt;p>Reboot your system&lt;/p>
&lt;blockquote>
&lt;p>sudo reboot&lt;/p>
&lt;/blockquote>
&lt;p>Install tensorflow&lt;/p>
&lt;p>Now is the time to decide between TensorFlow for CPU or GPU. I will continue with the GPU option, but if you want to run the CPU version just remove the “-gpu” from the package name.&lt;/p>
&lt;h5 id="create-an-anaconda-environment-for-tensorflow-20">Create an anaconda environment for Tensorflow 2.0&lt;/h5>
&lt;blockquote>
&lt;p>conda create &amp;ndash;name tf2.0 &lt;br>
conda activate tf2.0 &lt;br>
conda install pip &lt;br>
conda install tensorflow-gpu pandas numpy&lt;/p>
&lt;/blockquote>
&lt;p>Done! Now check the result with:&lt;/p>
&lt;blockquote>
&lt;p>python &lt;br>
from tensorflow.python.client import device_lib &lt;br>
device_lib.list_local_devices()&lt;/p>
&lt;/blockquote>
&lt;p>If the result shows a device name like this you are done!&lt;/p>
&lt;p>2018-05-01 05:25:25.929575: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 0 with properties:
name: GeForce GTX 3080 10GB major: …&lt;/p>
&lt;h5 id="create-an-anaconda-environment-for-tensorflow-115">Create an anaconda environment for Tensorflow 1.15&lt;/h5>
&lt;blockquote>
&lt;p>conda deactivate &lt;br>
conda create &amp;ndash;name tf1.15 &lt;br>
conda activate tf1.15 &lt;br>
conda install pip python==3.7 &lt;br>
conda install tensorflow-gpu==1.15&lt;/p>
&lt;/blockquote>
&lt;p>And again check if everything works and your gpu is recognized:&lt;/p>
&lt;blockquote>
&lt;p>python &lt;br>
from tensorflow.python.client import device_lib &lt;br>
device_lib.list_local_devices()&lt;/p>
&lt;/blockquote>
&lt;h3 id="6-switching-between-tensorflow-115-and-tensorflow-20-on-one-device">6. Switching between TensorFlow 1.15 and TensorFlow 2.0 on one device!&lt;/h3>
&lt;p>Just a dream coming true in my opinion, just select the 1.15 version with&lt;/p>
&lt;blockquote>
&lt;p>conda activate tf1.15&lt;/p>
&lt;/blockquote>
&lt;p>And the TensorFlow 2.0 version with&lt;/p>
&lt;blockquote>
&lt;p>conda activate tf2.0&lt;/p>
&lt;/blockquote></description></item></channel></rss>