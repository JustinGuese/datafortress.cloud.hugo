<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Products on Datafortress.cloud</title><link>https://datafortress.cloud/de/products/</link><description>Recent content in Products on Datafortress.cloud</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><managingEditor/><webMaster/><lastBuildDate>Tue, 12 Jul 2022 17:02:17 +0200</lastBuildDate><atom:link href="https://datafortress.cloud/de/products/index.xml" rel="self" type="application/rss+xml"/><item><title>AIStockpricePrediction</title><link>https://datafortress.cloud/de/products/aistockpriceprediction/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/de/products/aistockpriceprediction/</guid><description>
&lt;h1 id="aistockpriceprediction">AIStockpricePrediction&lt;/h1>
&lt;p>&lt;a href="https://aistockpriceprediction.com/">https://aistockpriceprediction.com/&lt;/a>&lt;/p>
&lt;p>AIStockpricePrediction.com ist mein &amp;ldquo;Frontend&amp;rdquo; zur Visualisierung meiner privaten Handelsideen und Algorithmen. Ein Kubernetes-Job läuft täglich, der alle SPY500-Aktien durch meine Microservice-Architektur (FastAPI, TensorFlow, LSTMs, Sklearn) &amp;ldquo;jagt&amp;rdquo; und dann die Ergebnisse im Markdown-Format speichert. GoHugo (Generator für statische Websites) wandelt sie dann in HTML um, und der Kubernetes-Job lädt sie dann auf GitHub hoch, wo sie von GitHub Actions auf die GitHub Pages übertragen werden.&lt;/p></description></item><item><title>DeFi/Web3: Kingdom Game</title><link>https://datafortress.cloud/de/products/web3-kingdom/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/de/products/web3-kingdom/</guid><description>
&lt;h1 id="defiweb3-kingdom-game">DeFi/Web3: Kingdom Game&lt;/h1>
&lt;p>&lt;a href="https://github.com/JustinGuese/solidity-kingdom-game">https://github.com/JustinGuese/solidity-kingdom-game&lt;/a>&lt;/p>
&lt;p>Ich habe ein Web3-Spiel geschrieben, das ein Königreich simuliert und gleichzeitig als Pool fungiert. Die Nutzer können &amp;ldquo;Seedcoins&amp;rdquo; kaufen und &amp;ldquo;pflanzen&amp;rdquo;. Nach einer Sperrfrist können sie die Samen &amp;ldquo;ernten&amp;rdquo;, um neue Kampf- oder Verteidigungseinheiten zu kaufen. Wenn Sie erfolgreich gegen ihren &amp;ldquo;Boss&amp;rdquo; kämpfen, steigen sie in der Rangliste auf. Die Rangliste wird von NFTs erstellt, und je &amp;ldquo;höher&amp;rdquo; eine NFT in der Rangliste steht, desto mehr Gewinn aus der Pooling-Belohnung wird an die NFTs verteilt. Die Software ist in Solidity (ETH-Kette) und React (JS) geschrieben.&lt;/p></description></item><item><title>EasyCloud</title><link>https://datafortress.cloud/de/products/easycloud/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/de/products/easycloud/</guid><description>
&lt;h1 id="easycloud">EasyCloud&lt;/h1>
&lt;p>&lt;a href="https://easycloudhost.de/">https://easycloudhost.de/&lt;/a>&lt;/p>
&lt;p>Hier biete ich mein eigenes Function-as-a-Service (FAAS) und verwaltetes Kubernetes (EasyKube) an. Das meiste davon basiert auf FastAPI (Python)-Microservices, die den BareMetal-Kubernetes-Cluster auf Hetzner-Servern (siehe &amp;ldquo;Buchinger Wilhelmi&amp;rdquo;) steuern.&lt;/p>
&lt;h2 id="führen-sie-ihre-apps-aus-ohne-sich-um-compliance-oder-server-zu-kümmern">Führen Sie Ihre Apps aus, ohne sich um Compliance oder Server zu kümmern&lt;/h2>
&lt;p>Unsere EasyServices ermöglichen es Ihnen, sich auf das zu konzentrieren, was für Ihr Unternehmen wichtig ist. Überlassen Sie uns Geschwindigkeit und Compliance und konzentrieren Sie sich darauf, mehr Umsatz mit Ihrem Kerngeschäft zu machen.&lt;/p></description></item><item><title>Myopiagraph</title><link>https://datafortress.cloud/de/products/myopiagraph/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/de/products/myopiagraph/</guid><description>
&lt;h1 id="myopiagraph">Myopiagraph&lt;/h1>
&lt;p>&lt;a href="https://myopiagraph.com/">https://myopiagraph.com/&lt;/a>&lt;/p>
&lt;p>Eine Software, die in 50 Augenarztpraxen in Bayern zur Visualisierung von Myopie bei Kindern eingesetzt wird. Es handelt sich um eine medizinische Software, die daher den EU- und deutschen Vorschriften für &amp;ldquo;medizinische Software&amp;rdquo; entspricht.
Die Benutzerauthentifizierung funktioniert mit AWS Cognito, das in Kubernetes Ingress mit oauth2-proxy (Go) terminiert und dann an das FastAPI (Python) Backend weitergeleitet wird, das in diesem Fall auch das Frontend bereitstellt. Die Zertifikate werden automatisch von LetsEncrypt mit dem Cert-Manager bestellt und verwaltet. Backups werden über Velero Backup auf Storj durchgeführt.&lt;/p></description></item><item><title>Open Source: Pandas to_sql</title><link>https://datafortress.cloud/de/products/pandas/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/de/products/pandas/</guid><description>
&lt;h1 id="open-source-pandas-to_sql">Open Source: Pandas to_sql&lt;/h1>
&lt;p>&lt;a href="https://github.com/pandas-dev/pandas/pull/48331">https://github.com/pandas-dev/pandas/pull/48331&lt;/a>&lt;/p>
&lt;p>Pandas ist eine der meistgenutzten Data-Science-Bibliotheken in Python, und ich arbeite schon seit einiger Zeit mit anderen an der Funktion &amp;ldquo;to_sql&amp;rdquo;. Derzeit ist diese Funktion nur in der Lage, einen Pandas-Datenrahmen in eine SQL-Datenbank zu schreiben, wenn die Einträge darin neu sind. Wenn es bereits einen Eintrag in der Datenbank gibt, wird ein Fehler ausgegeben. Die neue Funktionalität erlaubt ein Upsert und bietet verschiedene Optionen (on duplicate -&amp;gt; error / replace / keep database).
Die Tests für Pandas sind sehr streng, und der Code muss auf ARM, AMD, etc. funktionieren, so dass sich die PR ewig hinzieht.&lt;/p></description></item><item><title>Tradingbots</title><link>https://datafortress.cloud/de/products/tradingbots/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/de/products/tradingbots/</guid><description>
&lt;h1 id="tradingbots">Tradingbots&lt;/h1>
&lt;p>Ich entwickle seit einiger Zeit Trading-Bots und habe eine Backtest-Software auf einem privaten Kubernetes-Cluster geschrieben, der eine reale Marktumgebung simuliert. Sobald ich eine neue &amp;ldquo;Bot-Theorie&amp;rdquo; entwickelt habe, wird sie getestet. Der aktuelle Test läuft bereits seit 13 Monaten, und die ersten Kandidaten sind vielversprechend.
Einige Bot-Ideen sind unter &lt;a href="https://aistockpriceprediction.com/">https://aistockpriceprediction.com/&lt;/a> sowie in einigen von mir veröffentlichten Beiträgen zu sehen:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://guese-justin.medium.com/enhancing-stock-data-for-your-python-algorithmic-trading-model-b40c668e4087">https://guese-justin.medium.com/enhancing-stock-data-for-your-python-algorithmic-trading-model-b40c668e4087&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://guese-justin.medium.com/using-sklearns-decision-trees-to-form-simple-trading-decisions-for-trading-bots-5da2f2123744">https://guese-justin.medium.com/using-sklearns-decision-trees-to-form-simple-trading-decisions-for-trading-bots-5da2f2123744&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://towardsdatascience.com/how-to-deploy-an-automated-trading-bot-using-the-facebook-prophet-machine-learning-model-to-aws-1182c603e280">https://towardsdatascience.com/how-to-deploy-an-automated-trading-bot-using-the-facebook-prophet-machine-learning-model-to-aws-1182c603e280&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>