<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>serverless on Datafortress.cloud</title><link>https://datafortress.cloud/de/tags/serverless/</link><description>Recent content in serverless on Datafortress.cloud</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><managingEditor/><webMaster/><lastBuildDate>Fri, 17 Jun 2022 11:10:07 +0600</lastBuildDate><atom:link href="https://datafortress.cloud/de/tags/serverless/index.xml" rel="self" type="application/rss+xml"/><item><title>Der Wechsel von Wordpress zu Serverless, unhackbare statische Hochgeschwindigkeits-Websites</title><link>https://datafortress.cloud/de/blog/wordpress-to-serverless-highspeed-scalable-unhackable/</link><pubDate>Fri, 17 Jun 2022 11:10:07 +0600</pubDate><author>Justin Guese</author><guid>https://datafortress.cloud/de/blog/wordpress-to-serverless-highspeed-scalable-unhackable/</guid><description>
&lt;h1 id="umstieg-von-wordpress-auf-serverlos-unhackbare-statische-hochgeschwindigkeits-websites">Umstieg von Wordpress auf serverlos, unhackbare statische Hochgeschwindigkeits-Websites&lt;/h1>
&lt;p>Ich habe in der Vergangenheit Websites erstellt, haben aber immer mit der langsamen Leistung von WordPress zu kämpfen gehabt. Wenn es mit Plugins geladen ist, es braucht einige Ressourcen und kann mühsam sein, wenn man nur eine Idee auf einem kleinen Server entwickelt.&lt;/p>
&lt;p>Zusätzlich, auch die Sicherheit ist von Bedeutung, und als ein System, das &lt;a href="https://en.wikipedia.org/wiki/WordPress">33,6% der Websites verwenden&lt;/a>, es ist für Hacker sehr attraktiv, darin Sicherheitslücken und andere Probleme zu finden.
Aber wieder, da sie sehr beliebt ist, es gibt fast immer ein Plugin für die Probleme, die Sie haben, was die Nutzung erleichtert, und ein großartiges \All-in-One-Tool.&lt;/p>
&lt;h2 id="idee-1-verbesserung-der-wordpress-entwicklung">Idee 1: Verbesserung der WordPress-Entwicklung&lt;/h2>
&lt;p>Eines der ersten Dinge, die ich in der Vergangenheit getan habe, war, WordPress lokal zu entwickeln (e.g. &lt;a href="https://www.smashingmagazine.com/2018/04/wordpress-local-development-beginners-setup-deployment/">siehe diesen AWS-Beitrag&lt;/a>), und dann einfach das Ergebnis auf einem Server veröffentlichen. Die Programmier- und Schreibgeschwindigkeit ist enorm gestiegen., aber das Hochladen erwies sich als Problem, da WordPress-Links in der Regel in der verwendeten SQL-Datenbank \fest verdrahtet\ sind. Das bedeutet, dass sich alle meine Links auf \https://www\ bezogen haben..datafotress.Cloud\ (Arbeitsplatz) anstelle der Zieldomäne. Es gibt Möglichkeiten, dieses Problem zu lösen, wie das Umschreiben Ihrer URLs in SQL, oder die Verwendung von htaccess-Regeln zum Umschreiben der \alten\ URLs auf die \neuen\ URLs, aber dennoch, es war sehr mühsam, in Gang zu kommen.&lt;/p>
&lt;h2 id="idee-2-online-entwicklung-mit-ausgelagerten-mediendateien">Idee 2: Online-Entwicklung mit ausgelagerten Mediendateien&lt;/h2>
&lt;p>Das Problem der URL-Umschreibung ging mir sehr schnell auf die Nerven, und die lokale Entwicklung ist schlecht für mehrere Entwickler. Deshalb habe ich beschlossen, wieder \online\ zu gehen., und arbeiten \mit der Wolke. Die von mir verfolgte Architektur bestand darin, einen Entwicklungsserver einzusetzen, die nur für Entwickler zugänglich ist, und zum Hochladen von Mediendateien auf einen gemeinsam genutzten Speicher (AWS S3), von dem die Endbenutzer die Mediendateien abrufen. Als Mediendateien (Bilder, Videos, &amp;hellip;) sind die anspruchsvollsten Teile von WordPress, Geschwindigkeit drastisch erhöht, und zusätzlich, es war einfach, ein CDN darauf einzurichten, was im Grunde bedeutet, dass die Mediendateien in der ganzen Welt mit unbegrenzter Kapazität bereitgestellt werden (im Grunde serverlos). Dies bedeutet, dass ein Nutzer in e.g. Puerto Rico muss nicht auf meinen Server in Frankfurt zugreifen, hat aber eine \lokale\ Kopie in seiner Nähe. Zusätzlich, da der \schwere\ Teil von WordPress \outgesourct\ wurde, nur \kleine\ Server wurden benötigt, um PHP-Anfragen und die \Back-Office-Teile von WordPress zu bearbeiten. Du kannst mich gerne in den Kommentaren oder per Direktnachricht fragen., oder &lt;a href="https://devops.com/hosting-skalierbar-wordpress-auf-aws/">sehen Sie sich einen ähnlichen Ansatz von AWS an&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://datafortress.cloud/images/blog/Webp.net-resizeimage.png" alt="Architektur für wordpress auf AWS">&lt;/p>
&lt;p>Zusammen mit Autoscaling, dies schien die idealste Einstellung für WordPress zu sein, und es erwies sich als großartig. BUT&amp;hellip;&lt;/p>
&lt;p>Sie müssen noch nach Plugin-Updates suchen, Sicherheit, und Überwachung im Allgemeinen. Auch wenn AWS viel dazu beiträgt, dass diese Architektur sehr robust und schnell ist, es besteht weiterhin eine hohe operative Nachfrage. Zusätzlich, Durchführung einer separaten Entwicklung, Datenbank, Lastausgleich, und so weiter auf dem Server kann recht kostspielig sein, insbesondere für eine Website, die nicht viele Nutzer hat.
Und was hat Werner Vogels auf der re:invent 2015 gesagt?&lt;/p>
&lt;blockquote>
&lt;p>*&lt;em>\Kein Server ist leichter zu verwalten als kein Server *&lt;/em>&lt;/p>
&lt;p>Werner Vogels auf der re:invent 2015&lt;/p>
&lt;/blockquote>
&lt;h2 id="exkursion-eine-kurze-geschichte-des-code-of-web">Exkursion: Eine kurze Geschichte des Code of Web&lt;/h2>
&lt;p>WordPress ist ideal für Autoren und Redakteure, aber aus der Sicht eines Lösungsarchitekten ist es nicht großartig. Und warum? Auch wenn alles anklickbar ist, leicht zu handhaben, und so weiter, alle Ressourcen und Informationen werden im Hintergrund aus einer Datenbank bezogen, auch wenn es zum 100000sten Mal an diesem Tag gezogen wird. Es gibt Methoden zur Verringerung der Abfragelast auf SQL-Datenbanken, wie Redis und Memcached, aber warum sollte ich für jeden einzelnen Nutzer die gleiche Webseite \berechnen? \Früher, Websites luden in Sekundenschnelle (es sei denn, jemand hat telefoniert) und sie waren super klein - was hat sich geändert? Zusammen mit neuen Design-Anforderungen, die heutigen Websites sind voll von Effekten und Designs, die viel Rechenleistung erfordern. Auch wenn dies definitiv eine Verbesserung gegenüber dem Schwarz-Weiß-Stil der 90er Jahre ist, die Ladezeiten von Websites haben sich dramatisch verlängert - zumal der weltweite Verbindungsstandard immer noch das Mobilfunknetz ist.&lt;/p>
&lt;p>Um alle Effekte wiederzugeben, PHP-Code wird im Hintergrund verwendet, Code, der auf dem Server selbst ausgeführt wird. Das bedeutet, dass jedes Mal, wenn ein Nutzer eine Verbindung zu einer Website herstellt, der Server berechnet die Website, die er dem Nutzer anzeigen wird. In den 90er Jahren bestand die Website nur aus einfachem HTML-Code., die im Grunde einfache Anweisungen an den Browser sind, wie er Dinge zu behandeln hat. So wie der &lt;!-- raw HTML omitted -->-Tag dem Browser mitteilt, dass dies eine Überschrift ist, und &lt;!-- raw HTML omitted --> ist ein Absatz. Es sind keine (Entschuldigung für die Reduzierung der Komplexität!) Berechnungen erforderlich..&lt;/p>
&lt;p>Zusätzlich, Javascript und CSS gehen einen ähnlichen Weg, da CSS das Design in einem ähnlichen Ansatz wie HTML beschreibt, und Javascript wird nicht auf dem Server ausgeführt, sondern auf der Client-Seite. Das bedeutet, dass der Server sich nicht selbst berechnet, sondern \sendet Anweisungen\ an den Browser des Kunden (e.g. Ihr Telefon).&lt;/p>
&lt;p>Warum verwenden wir also nicht einfach HTML, Javascript, und CSS? Mit PHP können wir viele Dinge tun, und Frameworks zur Erstellung von Inhalten wie WordPress machen uns das Leben leichter. Aber die effizienteste Art, Websites zu produzieren, wäre, sie einmal zu erstellen und sie dann einfach fertig gerendert an die Massen zu verteilen.&lt;/p>
&lt;h2 id="idee-4-zurück-zu-den-wurzeln">Idee 4: Zurück zu den Wurzeln&lt;/h2>
&lt;p>Will ich damit sagen, dass wir zu den schwarz-weißen HTML-Seiten der 90er Jahre zurückkehren sollten? Natürlich nicht, aber die Kombination von HTML und CSS kann großartige Ergebnisse liefern, und Javascript wird mehr und mehr in der Lage sein, Prozesse zu bewältigen, die früher nur PHP bewältigen konnte. Und wenn Berechnungen erforderlich sind, es gibt großartige neue serverlose Möglichkeiten wie AWS Lambda (in meinem Blog finden Sie einige Anwendungen von Lambda).&lt;/p>
&lt;p>Zurück zum Hauptthema, Ich habe beschlossen, meinen Blog und alle künftigen Websites in einfachem HTML zu schreiben., CSS, und JS, da ich es nicht nötig habe&lt;/p>
&lt;ol>
&lt;li>&lt;strong>einen Server verwalten&lt;/strong> - ich kann ihn einfach fast kostenlos auf Github oder AWS S3 hosten&lt;/li>
&lt;li>&lt;strong>Sorgen Sie sich um hohe Anforderungen&lt;/strong> - S3 und Github skalieren automatisch, das heißt, wenn Tausende von Besuchern auf meiner Website eintreffen, wird mein Server nicht zusammenbrechen
viel bezahlen - da ich nicht so viele Berechnungen brauche wie bei WordPress, Der Betrieb dieses Blogs ist völlig kostenlos&lt;/li>
&lt;li>&lt;strong>Sie brauchen sich keine Sorgen um Sicherheitsprobleme zu machen&lt;/strong> - mein Blog ist im Grunde unhackbar&lt;/li>
&lt;/ol>
&lt;p>Zusätzlich, die Website ist rasend schnell, mit einer Google Pagespeed-Bewertung von 100%, was auch einen großen Einfluss auf das Page Ranking hat, da Google Hochgeschwindigkeits-Websites bevorzugt. Der einzige Grund, warum der aktuelle Punktestand bei 90 % liegt, ist, ist, dass ich beschlossen habe, CRM- und Tracking-Tools in meinen Blog aufzunehmen. Wann haben Sie das letzte Mal gesehen, dass eine kostenlose Website diese Punktzahl erreicht hat?&lt;/p>
&lt;p>Alles in allem, es ist einfach großartig, aber schreibe ich den gesamten HTML-Code selbst?&lt;/p>
&lt;h2 id="wir-stellen-vor-statische-website-generatoren">Wir stellen vor: Statische Website-Generatoren&lt;/h2>
&lt;p>Natürlich nicht, und zum Glück gibt es großartige Tools, die das für mich erledigen. Statische Website-Baukästen wie &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a> oder &lt;a href="https://gohugo.io/">Hugo&lt;/a> hilft Ihnen dabei, Ihre Texte in Markdown (im Grunde eine einfache Textdatei) zu schreiben und in HTML und eine schöne Website umzuwandeln.. Der Code wird nur einmal berechnet und kann auf einen Server hochgeladen werden, oder Github-Seiten und AWS S3 sofort vollständig serverlos sein. &lt;a href="https://datafortress.cloud/project/serverless-static-website/">Wie funktioniert das? Eine ausführliche Erklärung finden Sie in meinen Fallstudien in meinem Blog&lt;/a>.&lt;/p>
&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;p>Es ist ein tolles Gefühl, sich keine Gedanken über die Betriebszeit machen zu müssen, Skalierung, und Sicherheit nicht mehr. Ist es schwieriger als WordPress? Das kommt darauf an. Da sich diese Technologie gerade entwickelt, es muss ein Umdenken stattfinden, wenn Sie in der Vergangenheit mit WordPress und anderen gearbeitet haben, aber auch hier gibt es viele großartige Tools, die statische Website-Builder ähnlich der \bekannten\ WordPress-Umgebung erstellen, wie Forstwirtschaft.io zum Beispiel. Wie? &lt;a href="https://datafortress.cloud/project/serverless-static-website/">Besuchen Sie meinen Blog unter www.datafortress.Cloud, um die ausführliche Erklärung zu sehen&lt;/a>.
Im Moment, Es würde mich interessieren, ob Sie jemals versucht haben, serverlos zu arbeiten., oder wie Ihre Erfahrungen mit WordPress sind. &lt;a href="https://datafortress.cloud/kontakt/">Schicken Sie mir eine Nachricht, oder schreiben Sie einen Kommentar unten&lt;/a>.&lt;/p></description></item><item><title>Howto: Einen automatisierten Machine-Learning Aktienhandels-Roboter mittels AWS Lambda serverlos betreiben</title><link>https://datafortress.cloud/de/blog/howto-einen-automatisierten-machine-learning-aktienhandels-roboter-mittels-aws-lambda-serverlos-betreiben/</link><pubDate>Mon, 23 May 2022 22:00:00 +0000</pubDate><author>Justin Guese</author><guid>https://datafortress.cloud/de/blog/howto-einen-automatisierten-machine-learning-aktienhandels-roboter-mittels-aws-lambda-serverlos-betreiben/</guid><description>
&lt;p>In diesem Beitrag werde ich meinen Algorithmus für serverloses Investieren mit AWS Lambda, Facebook Prophet als ML-Modell und meiner benutzerdefinierten Lambda-Schicht vorstellen.&lt;/p>
&lt;p>Ich habe diesen Beitrag in die Abschnitte &amp;ldquo;Warum habe ich das gemacht&amp;rdquo; und &amp;ldquo;Technisches How To&amp;rdquo; unterteilt. Wenn Sie den &amp;ldquo;Warum&amp;rdquo;-Teil überspringen möchten, können Sie direkt zum technischen Teil springen.&lt;/p>
&lt;h2 id="warum-sollte-ich-ein-maschinelles-lernmodell-in-aws-lambda-einsetzen">Warum sollte ich ein maschinelles Lernmodell in AWS Lambda einsetzen?&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Die Zuverlässigkeit&lt;/strong>: Der Algorithmus wird unabhängig von anderen Systemen, Updates, &amp;hellip;&lt;/li>
&lt;li>&lt;strong>Leistungseffizienz&lt;/strong>: Ich kann mehrere Algorithmen auf einem (kleinen) System unabhängig voneinander ausführen.&lt;/li>
&lt;li>&lt;strong>Kosteneinsparungen&lt;/strong>: AWS ermöglicht &lt;a href="https://aws.amazon.com/lambda/?did=ft_card&amp;amp;trk=ft_card">3,2 Millionen Rechensekunden pro Monat&lt;/a>, so dass ich im Grunde alle meine Algorithmen kostenlos ausführen kann.&lt;/li>
&lt;/ol>
&lt;p>Ich habe nach einer Möglichkeit gesucht, zunächst sicherzustellen, dass mein Investitions-Bot sicher ausgeführt wird, denn eine fehlgeschlagene Ausführung kann viel Geld kosten, wenn ein Handel nicht umgehend abgebrochen wird, wenn er in die falsche Richtung geht. Außerdem wollte ich vermeiden, meinen Computer die ganze Zeit laufen zu lassen, und sicherstellen, dass mehrere Algorithmen nebeneinander laufen können, ohne ihre Ausführung zu beeinflussen oder zu verzögern.&lt;/p>
&lt;p>Darüber hinaus ist es ein schöner Gedanke, einen investierenden Algorithmus laufen zu lassen, ohne sich um Betriebssystem-Updates, Hardware-Ausfälle und Stromausfälle usw. zu kümmern, was der allgemeine Vorteil serverloser Technologien ist.&lt;/p>
&lt;p>Im Moment kann ich mehrere Variationen des Algorithmus laufen lassen, um Änderungen des Algorithmus zu testen, und kann sicher sein, dass er läuft. Noch eine nette Sache? AWS bietet etwa 1 Million kostenlose Lambda-Aufrufe an, so dass ich die gesamte Architektur in ihrem Free Tier-Kontingent laufen lassen kann.&lt;/p>
&lt;h2 id="der-investitionsalgorithmus">Der Investitionsalgorithmus&lt;/h2>
&lt;p>Ich werde den Algorithmus in einem anderen Beitrag auf meiner Website &lt;a href="">www.datafortress.cloud&lt;/a> ausführlicher erläutern, aber mein typischer Aufbau eines Investitionsalgorithmus besteht aus:&lt;/p>
&lt;ol>
&lt;li>Testen des Algorithmus mit &lt;a href="https://www.backtrader.com/">Backtrader&lt;/a>, einem Open-Source-Backtesting-Framework, das in Python geschrieben wurde&lt;/li>
&lt;li>Konvertieren des erfolgreichen Algorithmus in eine einzelne Python-Datei, die eine run()-Methode enthält, die zurückgibt, welche Investitionen getätigt wurden&lt;/li>
&lt;li>Übertragen der Python-Datei zu AWS Lambda, wo ich die run()-Funktion mit der lambda_handler-Funktion von AWS Lambda aufrufe&lt;/li>
&lt;/ol>
&lt;p>In diesem Beispielalgorithmus treffe ich Investitionsentscheidungen in Abhängigkeit davon, ob der aktuelle Kurs über oder unter der Trendlinie liegt, die vom &lt;a href="https://facebook.github.io/prophet/">Prophetenmodell von Facebook&lt;/a> vorhergesagt wird. Ich habe Ideen von &lt;a href="http://seangtkelley.me/blog/2018/08/15/algo-trading-pt2">Sean Kelley übernommen&lt;/a>, der ein Backtrader-Setup geschrieben hat, wie man Prophet mit Backtrader einsetzen kann.&lt;/p>
&lt;p>Mein Aktienuniversum in diesem Setup wird berechnet, indem ich die 20 besten Aktien aus dem SPY500-Index auswähle, der in den vergangenen X Zeitschritten die höchste Rendite erzielte.&lt;/p>
&lt;p>Die Datenquelle ist Yahoo Finance, unter Verwendung der kostenlosen &lt;a href="">Yfinance-Bibliothek&lt;/a>, und als mein bevorzugter algorithmischer Broker habe ich &lt;a href="https://alpaca.markets/">Alpaca.markets&lt;/a> gewählt.&lt;/p>
&lt;p>In meinem Setup wird der Algorithmus einmal pro Tag um 15 Uhr oder alle 15 Minuten während der Handelszeiten ausgeführt.&lt;/p>
&lt;h2 id="die-probleme-beim-einsatz-des-facebook-propheten-bei-aws-lambda">Die Probleme beim Einsatz des Facebook-Propheten bei AWS Lambda&lt;/h2>
&lt;p>AWS Lambda wird mit einigen Python-Bibliotheken vorinstalliert geliefert, aber wie viele von Ihnen vielleicht wissen, ist dies standardmäßig recht begrenzt (was für Lambda&amp;rsquo;s Versprechen angemessen ist). Dennoch erlaubt Lambda die Installation privater Pakete, was für kleinere Pakete recht einfach ist (siehe die&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/python-package.html"> offizielle Dokumentation&lt;/a>), aber etwas komplizierter wird, wenn es sich um Pakete handelt, die größer als 250 Mb sind. Unglücklicherweise überschreitet das Prophetenmodell von Facebook diese Grenze, aber glücklicherweise hat &lt;a href="https://towardsdatascience.com/how-to-get-fbprophet-work-on-aws-lambda-c3a33a081aaf">Alexandr Matsenov dieses Problem gelöst&lt;/a>, indem er die Paketgröße reduziert hat, und &lt;a href="https://github.com/marcmetz/How-To-Deploy-Facebook-Prophet-on-AWS-Lambda">Marc Metz hat sich um Kompilierungsprobleme gekümmert, damit es auf AWS Lambda läuft.&lt;/a>&lt;/p>
&lt;p>Nicht standardmäßige Bibliotheken können zu AWS Lambda hinzugefügt werden, indem man Layer verwendet, die alle benötigten Pakete enthalten. Wenn ein Layer importiert wird, können Sie die Pakete einfach in Ihrer Python-Funktion importieren, wie Sie es in Ihrem lokalen Setup tun würden.&lt;/p>
&lt;h1 id="die-technische-anleitung">Die technische Anleitung&lt;/h1>
&lt;p>Lassen Sie mich abschließend erklären, wie genau Sie dies erreichen können. Siehe dieses TLDR für die ungeduldigen Typen oder die detailliertere Version unten.&lt;/p>
&lt;p>&lt;strong>TLDR;&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Sie benötigen ein Lambda-Layer, laden Sie meine (&lt;a href="https://github.com/JustinGuese/How-To-Deploy-Facebook-Prophet-on-AWS-Lambda/raw/master/python.zip">Download&lt;/a>) mit Prophet, yfinance, &amp;hellip; auf einen S3-Bucket (privater Zugang)&lt;/li>
&lt;li>Wählen Sie AWS Lambda, erstellen Sie eine Funktion, fügen Sie ein Layer hinzu und fügen Sie in Ihre S3-Objekt-URL ein&lt;/li>
&lt;li>Fügen Sie Ihre lambda_function.py in den Lambda-Editor ein (&lt;a href="https://github.com/JustinGuese/How-To-Deploy-Facebook-Prophet-on-AWS-Lambda/blob/master/lambda_function.py">oder verwenden Sie meine&lt;/a>)&lt;/li>
&lt;li>Richten Sie Ihre Umgebungsvariablen ein (optional)&lt;/li>
&lt;li>Führen Sie es entweder manuell aus, indem Sie auf &amp;ldquo;Test&amp;rdquo; klicken, oder gehen Sie zu CloudWatch -&amp;gt; Regeln -&amp;gt; Regel erstellen und richten Sie &amp;ldquo;Ausführung planen&amp;rdquo; ein, um es in einem bestimmten Zeitintervall auszuführen&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Ausführliche Erläuterung:&lt;/strong>&lt;/p>
&lt;h2 id="1-erstellen-eines-benutzerdefinierten-layers-für-aws-lambda">1. Erstellen eines benutzerdefinierten Layers für AWS Lambda&lt;/h2>
&lt;p>Sie können entweder mein Lambda-Layer verwenden, die Facebook Prophet, NumPy, Pandas, Alpaka-Handels-API, yfinance (&lt;a href="https://github.com/JustinGuese/How-To-Deploy-Facebook-Prophet-on-AWS-Lambda">GitHub&lt;/a>) enthält, oder Sie können Ihre eigene unter Verwendung der &lt;a href="https://medium.com/@marc.a.metz/docker-run-rm-it-v-pwd-var-task-lambci-lambda-build-python3-7-bash-c7d53f3b7eb2">von Marc gegebenen Erklärung zusammenstellen.&lt;/a>&lt;/p>
&lt;p>&lt;strong>Meine Lambda-Schicht verwenden&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Laden Sie die Zip-Datei von meinem &lt;a href="https://github.com/JustinGuese/How-To-Deploy-Facebook-Prophet-on-AWS-Lambda/raw/master/python.zip">Github-Repo&lt;/a> herunter, die alle Pakete enthält (&lt;a href="https://github.com/JustinGuese/How-To-Deploy-Facebook-Prophet-on-AWS-Lambda/raw/master/python.zip">Link&lt;/a>)&lt;/li>
&lt;li>Da Sie Layer nur bis zu einer Größe von 50 Mb direkt auf Lambda hochladen können, müssen wir die Datei zunächst auf AWS S3 hochladen.&lt;/li>
&lt;li>Erstellen Sie einen Bucket und legen Sie die heruntergeladene Zip-Datei in diesen Eimer. Der Zugang kann privat bleiben und muss NICHT öffentlich sein! Kopieren Sie die URL in Ihre Datei (z.B. &lt;a href="https://BUCKETNAME.s3.REGION.amazonaws.com/python.zip" title="https://BUCKETNAME.s3.REGION.amazonaws.com/python.zip">https://BUCKETNAME.s3.REGION.amazonaws.com/python.zip&lt;/a>)&lt;/li>
&lt;li>Loggen Sie sich in AWS ein und gehen Sie zu Lambda -&amp;gt; Layers (&lt;a href="https://eu-central-1.console.aws.amazon.com/lambda/home?region=eu-central-1#/layers">EU central Link&lt;/a>)&lt;/li>
&lt;li>Klicken Sie auf &amp;ldquo;Layer erstellen&amp;rdquo;, geben Sie ihr einen passenden Namen und wählen Sie &amp;ldquo;Eine Datei von Amazon S3 hochladen&amp;rdquo;, und kopieren Sie den Code von Schritt 3 hinein. Wählen Sie als Runtimes Python 3.7. Klicken Sie auf &amp;ldquo;Erstellen&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Kompilieren Sie Ihre eigenes Lambda-Layer&lt;/strong>&lt;/p>
&lt;p>Bitte folgen Sie den &lt;a href="https://medium.com/@marc.a.metz/docker-run-rm-it-v-pwd-var-task-lambci-lambda-build-python3-7-bash-c7d53f3b7eb2">Anweisungen von Marc&lt;/a>.&lt;/p>
&lt;h2 id="2-erstellen-einer-lambda-funktion">2. Erstellen einer Lambda Funktion&lt;/h2>
&lt;ol>
&lt;li>Öffnen Sie das Dashboard der Lambda-Funktion (&lt;a href="https://eu-central-1.console.aws.amazon.com/lambda/home?region=eu-central-1#/functions">EU central Link&lt;/a>) und klicken Sie auf &amp;ldquo;Funktion erstellen&amp;rdquo;.&lt;/li>
&lt;li>Lassen Sie das Kontrollkästchen &amp;ldquo;Von Grund auf neu&amp;rdquo; unverändert und geben Sie ihm einen passenden Namen.&lt;/li>
&lt;li>Wählen Sie in &amp;ldquo;Runtime&amp;rdquo; Python 3.7, lassen Sie den Rest unverändert und klicken Sie auf &amp;ldquo;Funktion erstellen&amp;rdquo;.&lt;/li>
&lt;li>In der Übersicht der Registerkarte &amp;ldquo;Designer&amp;rdquo; sehen Sie eine grafische Darstellung Ihrer Lambda-Funktion. Klicken Sie auf das Feld &amp;ldquo;Schichten&amp;rdquo; darunter und klicken Sie auf &amp;ldquo;Eine Schicht hinzufügen&amp;rdquo;. Wenn Sie den Layer korrekt eingerichtet haben, können Sie ihn im folgenden Dialog auswählen. Klicken Sie schliesslich auf &amp;ldquo;Hinzufügen&amp;rdquo;.&lt;/li>
&lt;li>In der Registerkarte &amp;ldquo;Designer&amp;rdquo; wählen Sie Ihre Lambda-Funktion aus. Wenn Sie nach unten scrollen, sehen Sie ein Standard-Python-Code-Snippet in einer Datei namens &amp;ldquo;lambda_function.py&amp;rdquo;. Wenn Sie Ihren Code genauso strukturiert haben wie meinen (&lt;a href="https://github.com/JustinGuese/How-To-Deploy-Facebook-Prophet-on-AWS-Lambda/blob/master/lambda_function.py">Link&lt;/a>), können Sie Ihre Funktion mit der run()-Funktion ausführen. Wenn eine Lambda-Funktion aufgerufen wird, wird sie die lambda_handler(event, context)-Funktion ausführen, von der aus Sie z.B. die run()-Funktion aufrufen können. Natürlich können Sie alle Dateien und Funktionen umbenennen, aber der Einfachheit halber habe ich dieses Projekt so belassen, wie es ist.&lt;/li>
&lt;li>Fühlen Sie sich frei, &lt;a href="https://github.com/JustinGuese/How-To-Deploy-Facebook-Prophet-on-AWS-Lambda/blob/master/lambda_function.py">meine Funktion&lt;/a> einfach einzufügen und zu testen.&lt;/li>
&lt;li>Ein Klick auf &amp;ldquo;Test&amp;rdquo; sollte zu einer erfolgreichen Ausführung führen, andernfalls werden die Fehler im Dialog angezeigt.&lt;/li>
&lt;/ol>
&lt;h2 id="3-umgebungsvariabeln-in-aws-lambda-hinzufügen-und-nutzen">3. Umgebungsvariabeln in AWS Lambda hinzufügen und nutzen&lt;/h2>
&lt;p>Sie sollten Ihren Benutzer und Ihr Passwort niemals als Klartext in Ihrem Code hinterlassen, weshalb Sie immer Umgebungsvariablen verwenden sollten! Glücklicherweise verwendet auch Lambda diese, und sie können leicht mit dem Python-OS-Paket aufgerufen werden. In meinem Skript rufe ich z.B. die Benutzervariable mit os.environ[&amp;lsquo;ALPACAUSER&amp;rsquo;] auf. Die Umgebungsvariablen können im Hauptfunktionsbildschirm von Lambda eingerichtet werden, wenn Sie unter Ihrem Code-Editor nach unten scrollen.&lt;/p>
&lt;h2 id="4-aws-lambda-funktionen-in-einem-bestimmten-zeitintervall-auslösen">4. AWS Lambda Funktionen in einem bestimmten Zeitintervall auslösen&lt;/h2>
&lt;p>Das Konzept von Serverless und AWS Lambda basiert auf der Idee, dass eine Funktion ausgeführt wird, wenn ein Trigger-Ereignis eintritt. In meinem Setup wollte ich, dass die Funktion z.B. alle 15 Minuten während der Handelszeiten, Montag bis Freitag, aufgerufen wird. Glücklicherweise bietet AWS eine Möglichkeit, ein Ereignis auszulösen, ohne dass ein Server laufen muss, indem der CloudWatch-Dienst genutzt wird.&lt;/p>
&lt;ol>
&lt;li>Gehen Sie zu CloudWatch (&lt;a href="https://eu-central-1.console.aws.amazon.com/cloudwatch/home?region=eu-central-1">EU central Link&lt;/a>).&lt;/li>
&lt;li>Wählen Sie in der linken Leiste &amp;ldquo;Events&amp;rdquo; und &amp;ldquo;Rule&amp;rdquo;.&lt;/li>
&lt;li>Klicken Sie auf &amp;ldquo;Create Rule&amp;rdquo;, und wählen Sie &amp;ldquo;Schedule&amp;rdquo; anstelle von &amp;ldquo;Event pattern&amp;rdquo;. Hier können Sie den einfachen &amp;ldquo;Fixed-rate&amp;rdquo;-Dialog verwenden oder einen Cron-Ausdruck erstellen. Ich benutze &lt;a href="https://crontab.guru/" title="https://crontab.guru/">https://crontab.guru/&lt;/a> (kostenlos), um Cron-Ausdrücke zu erstellen. Mein Cron-Ausdruck für den oben erwähnten Anwendungsfall lautet &amp;ldquo;0/15 13-21 ? * MON-FRI *&amp;rdquo;.&lt;/li>
&lt;li>Wählen Sie in der rechten Tafel &amp;ldquo;Add Target&amp;rdquo; und wählen Sie Ihre Lambda-Funktion. Sie wird automatisch zu Lambda hinzugefügt.&lt;/li>
&lt;li>Klicken Sie schließlich auf &amp;ldquo;Details konfigurieren&amp;rdquo;, geben Sie ihr einen Namen und klicken Sie auf &amp;ldquo;Regel erstellen&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;h2 id="5-optional-log-analysen-errorsuche">5. (optional) Log Analysen, Errorsuche&lt;/h2>
&lt;p>Wenn Sie es bis zu diesem Teil geschafft haben, sollten Sie fertig sein! Wenn Sie aber überprüfen wollen, ob alles funktioniert hat, können Sie mit CloudWatch einen Blick auf die Ausgaben der Lambda-Funktionen werfen. Gehen Sie zu CloudWatch -&amp;gt; Logs -&amp;gt; Log-Gruppen (&lt;a href="https://eu-central-1.console.aws.amazon.com/cloudwatch/home?region=eu-central-1#logsV2:log-groups">EU central Link&lt;/a>) und wählen Sie Ihre Lambda-Funktion aus. In dieser Übersicht sollten Sie die Ausgaben Ihrer Funktionen sehen können.&lt;/p>
&lt;p>Wenn Ihnen dieser Beitrag gefallen hat, hinterlassen Sie einen Kommentar oder schauen Sie sich andere Beiträge an, um mich weiterhin zum Schreiben zu motivieren 😊.&lt;/p></description></item><item><title>Von Wordpress zu serverlosen, unhackbaren statischen Hochgeschwindigkeits-Webseiten</title><link>https://datafortress.cloud/de/blog/wordpress-zu-serverlos-unhackbare-webseite/</link><pubDate>Tue, 17 May 2022 11:10:07 +0600</pubDate><author>Justin Guese</author><guid>https://datafortress.cloud/de/blog/wordpress-zu-serverlos-unhackbare-webseite/</guid><description>
&lt;h1 id="von-wordpress-zu-serverlosen-unhackbaren-statischen-hochgeschwindigkeits-websites">Von Wordpress zu serverlosen, unhackbaren statischen Hochgeschwindigkeits-Websites&lt;/h1>
&lt;p>Ich habe in der Vergangenheit Websites erstellt, aber immer mit der langsamen Leistung von WordPress zu kämpfen gehabt. Wenn es mit Plugins geladen ist, wird es ziemlich viele Ressourcen benötigen und kann eine Qual sein, wenn Sie gerade eine Idee auf einem kleinen Server entwickeln.&lt;/p>
&lt;p>Darüber hinaus ist auch die Sicherheit ein Thema, und als ein System, das &lt;a href="https://en.wikipedia.org/wiki/WordPress">33,6% der Websites benutzen&lt;/a>, ist es für Hacker recht attraktiv, Exploits und andere Probleme darin zu finden.
Aber wie gesagt, da es massiv populär ist, gibt es fast jedes Mal ein Plugin für die Probleme, die Sie haben, wodurch es einfach zu benutzen ist, und ein großartiges &amp;ldquo;All-in-one&amp;rdquo;-Tool.&lt;/p>
&lt;h2 id="idee-1-verbesserung-der-wordpress-entwicklung">Idee 1: Verbesserung der WordPress-Entwicklung&lt;/h2>
&lt;p>Eines der ersten Dinge, die ich in der Vergangenheit getan habe, war, WordPress lokal zu entwickeln (z.B. &lt;a href="https://www.smashingmagazine.com/2018/04/wordpress-local-development-beginners-setup-deployment/">siehe diesen AWS-Post&lt;/a>), und dann einfach das Ergebnis auf einem Server zu veröffentlichen. Die Programmier- und Schreibgeschwindigkeiten stiegen enorm an, aber der Teil des Hochladens erwies sich als ein Problem, da WordPress-Links normalerweise fest mit der verwendeten SQL-Datenbank &amp;ldquo;verdrahtet&amp;rdquo; sind. Das bedeutet, dass alle meine Links auf &amp;ldquo;&lt;a href="https://www.datafotress.cloud">https://www.datafotress.cloud&lt;/a>&amp;rdquo; (Mein Computer) und nicht auf die Zieldomäne verwiesen. Es gibt Möglichkeiten, dies zu lösen, wie z.B. das Neuschreiben Ihrer URLs in SQL oder die Verwendung von neu geschriebenen htaccess-Regeln, um &amp;ldquo;alte&amp;rdquo; URLs auf die &amp;ldquo;neuen&amp;rdquo; zu verweisen, aber es war trotzdem sehr schwierig, den Anfang zu machen.&lt;/p>
&lt;h2 id="idee-2-online-entwicklung-mit-entladenen-mediendateien">Idee 2: Online-Entwicklung mit entladenen Mediendateien&lt;/h2>
&lt;p>Dieses Problem der URL-Umschreibung ging mir sehr schnell auf die Nerven, und die lokale Entwicklung ist schlecht für mehrere Entwickler. Deshalb beschloss ich, wieder &amp;ldquo;online zu gehen&amp;rdquo; und &amp;ldquo;mit der Cloud&amp;rdquo; zu arbeiten. Die Architektur, der ich gefolgt bin, bestand darin, einen Entwicklungsserver bereitzustellen, der nur für Entwickler zugänglich ist, und Mediendateien auf einen gemeinsamen Speicher (AWS S3) hochzuladen, von dem die Endbenutzer die Mediendateien abrufen. Da Mediendateien (Bilder, Videos, &amp;hellip;) die anspruchsvollsten Teile von WordPress sind, hat sich die Geschwindigkeit drastisch erhöht, und zusätzlich war es einfach, ein CDN darüber einzurichten, was im Grunde bedeutet, dass die Mediendateien weltweit mit unbegrenzter Kapazität (im Grunde serverlos) bereitgestellt werden. Das bedeutet, dass ein Benutzer in z.B. Puerto Rico nicht auf meinen Server in Frankfurt zugreifen muss, sondern eine &amp;ldquo;lokale&amp;rdquo; Kopie in seiner Nähe hat. Da außerdem der &amp;ldquo;schwere&amp;rdquo; Teil von WordPress &amp;ldquo;ausgelagert&amp;rdquo; wurde, wurden nur &amp;ldquo;kleine&amp;rdquo; Server benötigt, um PHP-Anfragen und die &amp;ldquo;Back-Office&amp;rdquo;-Teile von WordPress zu bearbeiten. Bitte zögern Sie nicht, mich in den Kommentaren oder einer direkten Nachricht mehr darüber zu fragen, oder &lt;a href="https://devops.com/hosting-scalable-wordpress-on-aws/">sehen Sie sich einen ähnlichen Ansatz von AWS an&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://datafortress.cloud/images/blog/Webp.net-resizeimage.png" alt="Architektur für WordPress auf AWS">&lt;/p>
&lt;p>Zusammen mit Autoscaling schien dies das ideale Setup für WordPress zu sein, und es erwies sich als großartig. ABER&amp;hellip;&lt;/p>
&lt;p>Sie mussten noch nach Plugin-Updates, Sicherheit und Überwachung im Allgemeinen suchen. Auch wenn AWS viel dazu beiträgt, diese Architektur recht belastbar und schnell zu machen, gibt es immer noch einen hohen operativen Bedarf. Außerdem kann der Betrieb einer separaten Entwicklung, Datenbank, Lastverteilung usw. auf dem Server ziemlich teuer sein, besonders für eine Website, die nicht viele Benutzer hat.
Und was hat Werner Vogels bei re:invent 2015 gesagt?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>&amp;ldquo;Kein Server ist einfacher zu verwalten als kein Server &amp;ldquo;&lt;/strong>&lt;/p>
&lt;p>Werner Vogels bei re:invent 2015&lt;/p>
&lt;/blockquote>
&lt;h2 id="exkursion-eine-kurze-geschichte-des-codes-vom-netz">Exkursion: Eine kurze Geschichte des Codes vom Netz&lt;/h2>
&lt;p>WordPress ist großartig für Autoren und Redakteure, aber aus der Perspektive eines Lösungsarchitekten ist es nicht großartig. Warum? Obwohl alles anklickbar, einfach zu handhaben usw. ist, werden alle Ressourcen und Informationen aus einer Datenbank im Hintergrund abgerufen, auch wenn sie an diesem Tag zum 100000sten Mal abgerufen wird. Es gibt Methoden, um die Abfragelast auf SQL-Datenbanken zu reduzieren, wie Redis und Memcached, aber warum sollte ich für jeden einzelnen Benutzer dieselbe Webseite &amp;ldquo;berechnen&amp;rdquo;? &amp;ldquo;Früher wurden Webseiten in Sekundenschnelle geladen (es sei denn, jemand war am Telefon) und sie waren superklein - was hat sich geändert? Zusammen mit den neuen Design-Anforderungen sind die heutigen Websites voller Effekte und Designs, die die Rechenressourcen stark beanspruchen. Auch wenn dies definitiv eine Verbesserung gegenüber dem Schwarz-Weiß-Stil der 90er Jahre darstellt, haben die Ladezeiten von Websites dramatisch zugenommen - zumal der weltweite Verbindungsstandard nach wie vor das Mobilfunknetz ist.&lt;/p>
&lt;p>Um alle Effekte zu rendern, wird im Hintergrund PHP-Code verwendet, also Code, der auf dem Server selbst ausgeführt wird. Das heißt, jedes Mal, wenn ein Benutzer eine Verbindung zu einer Website herstellt, berechnet der Server die Website, die er dem Benutzer zeigen wird. Die 90er-Jahre-Version von Websites enthielt nur einfachen HTML-Code, bei dem es sich im Grunde um einfache Anweisungen an den Browser handelt, wie die Dinge zu handhaben sind. Wie der &lt;!-- raw HTML omitted -->-Tag dem Browser mitteilt, ist dies eine Überschrift, und &lt;!-- raw HTML omitted --> ist ein Absatz. Es sind keine (sorry für die Reduzierung der Komplexität!) Berechnungen erforderlich.&lt;/p>
&lt;p>Außerdem gehen Javascript und CSS einen ähnlichen Weg, da CSS das Design in einem ähnlichen Ansatz wie HTML beschreibt und Javascript nicht auf dem Server, sondern auf der Client-Seite ausgeführt wird. Das heißt, der Server berechnet sich nicht selbst, sondern &amp;ldquo;sendet Anweisungen&amp;rdquo; an den Browser des Clients (z.B. Ihr Telefon).&lt;/p>
&lt;p>Warum verwenden wir also nicht einfach HTML, Javascript und CSS? Mit PHP können wir viele Dinge tun, und es ermöglicht uns die Erstellung von Frameworks zur Inhaltserstellung wie WordPress, um uns das Leben zu erleichtern. Aber der effizienteste Weg, Webseiten zu erstellen, wäre, sie einmal zu generieren und dann einfach die bereits gerenderten Seiten an die Massen zu verteilen.&lt;/p>
&lt;h2 id="idee-4-rückbesinnung-auf-die-wurzeln">Idee 4: Rückbesinnung auf die Wurzeln&lt;/h2>
&lt;p>Sage ich also, dass wir zu den schwarz-weißen HTML-Seiten der 90er Jahre zurückkehren sollten? Natürlich nicht, aber die Kombination von HTML und CSS kann großartige Ergebnisse erzielen, und Javascript wird immer mehr in der Lage, Prozesse zu verarbeiten, die früher nur PHP beherrschte. Und wenn Berechnungen erforderlich sind, gibt es großartige neue serverlose Möglichkeiten wie AWS Lambda (in meinem Blog finden Sie einige Anwendungen von Lambda).&lt;/p>
&lt;p>Um zum Hauptthema zurückzukommen, habe ich beschlossen, meinen Blog und alle zukünftigen Websites in einfachem HTML, CSS und JS zu schreiben, da ich nicht&lt;/p>
&lt;ol>
&lt;li>&lt;strong>einen Server managen&lt;/strong> - Ich kann ihn einfach fast kostenlos auf Github oder AWS S3 hosten&lt;/li>
&lt;li>&lt;strong>sich um hohe Anforderungen kümmern&lt;/strong> - S3 und Github skalieren automatisch, d.h. wenn Tausende von Besuchern auf meine Website kommen, stürzt mein Server nicht ab
viel bezahlen - da ich nicht so viele Berechnungen wie bei WordPress benötige, ist der Betrieb dieses Blogs völlig kostenlos&lt;/li>
&lt;li>&lt;strong>Sie müssen sich keine Sorgen über Sicherheitsfragen machen&lt;/strong> - mein Blog ist im Grunde unhackbar&lt;/li>
&lt;/ol>
&lt;p>Darüber hinaus ist die Website blitzschnell, mit einem Google Pagespeed-Score von 100%, was sich auch auf das Page Ranking auswirkt, da Google Hochgeschwindigkeits-Websites bevorzugt. Der einzige Grund, warum der aktuelle Wert auf 90 % gesunken ist, ist, dass ich mich entschlossen habe, CRM- und Tracking-Tools in meinen Blog aufzunehmen. Wann haben Sie das letzte Mal gesehen, dass eine kostenlose Website diesen Wert erreicht hat?&lt;/p>
&lt;p>Alles in allem ist sie einfach großartig, aber schreibe ich den gesamten HTML-Code selbst?&lt;/p>
&lt;h2 id="darf-ich-vorstellen-statische-website-generatoren">Darf ich vorstellen: Statische Website-Generatoren&lt;/h2>
&lt;p>Natürlich nicht, und glücklicherweise gibt es für mich großartige Werkzeuge, um damit umzugehen. Statische Website-Ersteller wie &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a> oder &lt;a href="https://gohugo.io/">Hugo&lt;/a> helfen sehr dabei, dass Sie im Grunde nur die Markdown-Sprache (im Grunde eine einfache txt-Datei) eingeben und Ihre Texte in HTML und eine schöne Website umwandeln können. Der Code wird nur einmal berechnet und kann auf einen Server hochgeladen werden, oder Github-Seiten und AWS S3 sofort, um völlig serverlos zu sein. Wie funktioniert das? Schauen Sie sich meine Fallstudien in meinem Blog an, um eine ausführliche Erklärung zu erhalten.&lt;/p>
&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;p>Es ist ein tolles Gefühl, sich keine Sorgen mehr über Betriebszeit, Skalierung und Sicherheit zu machen. Ist es schwieriger als WordPress? Das hängt davon ab. Da sich diese Technologie gerade erst entwickelt, muss man umdenken, wenn man in der Vergangenheit mit WordPress und anderen gearbeitet hat, aber auch hier gibt es viele großartige Tools, die statische Website-Ersteller der &amp;ldquo;bekannten&amp;rdquo; WordPress-Umgebung ähnlich machen, wie z.B. forestry.io. Wie? Schauen Sie in meinem Blog unter &lt;a href="https://www.datafortress.cloud">www.datafortress.cloud&lt;/a> nach, um die ausführliche Erklärung zu sehen](/project/serverless-static-website/).
Im Moment würde es mich interessieren, ob Sie jemals versucht haben, serverlos zu arbeiten, oder welche Erfahrungen Sie mit WordPress gemacht haben. &lt;a href="https://datafortress.cloud/de/contact/">Schießen Sie mir eine Nachricht, oder schreiben Sie unten einen Kommentar&lt;/a>&lt;/p></description></item></channel></rss>