<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Websites on Datafortress.cloud</title><link>https://datafortress.cloud/de/tags/websites/</link><description>Recent content in Websites on Datafortress.cloud</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><managingEditor/><webMaster/><lastBuildDate>Fri, 17 Jun 2022 11:10:07 +0600</lastBuildDate><atom:link href="https://datafortress.cloud/de/tags/websites/index.xml" rel="self" type="application/rss+xml"/><item><title>Der Wechsel von Wordpress zu Serverless, unhackbare statische Hochgeschwindigkeits-Websites</title><link>https://datafortress.cloud/de/blog/wordpress-to-serverless-highspeed-scalable-unhackable/</link><pubDate>Fri, 17 Jun 2022 11:10:07 +0600</pubDate><author>Justin Guese</author><guid>https://datafortress.cloud/de/blog/wordpress-to-serverless-highspeed-scalable-unhackable/</guid><description>
&lt;h1 id="umstieg-von-wordpress-auf-serverlos-unhackbare-statische-hochgeschwindigkeits-websites">Umstieg von Wordpress auf serverlos, unhackbare statische Hochgeschwindigkeits-Websites&lt;/h1>
&lt;p>Ich habe in der Vergangenheit Websites erstellt, haben aber immer mit der langsamen Leistung von WordPress zu kämpfen gehabt. Wenn es mit Plugins geladen ist, es braucht einige Ressourcen und kann mühsam sein, wenn man nur eine Idee auf einem kleinen Server entwickelt.&lt;/p>
&lt;p>Zusätzlich, auch die Sicherheit ist von Bedeutung, und als ein System, das &lt;a href="https://en.wikipedia.org/wiki/WordPress">33,6% der Websites verwenden&lt;/a>, es ist für Hacker sehr attraktiv, darin Sicherheitslücken und andere Probleme zu finden.
Aber wieder, da sie sehr beliebt ist, es gibt fast immer ein Plugin für die Probleme, die Sie haben, was die Nutzung erleichtert, und ein großartiges \All-in-One-Tool.&lt;/p>
&lt;h2 id="idee-1-verbesserung-der-wordpress-entwicklung">Idee 1: Verbesserung der WordPress-Entwicklung&lt;/h2>
&lt;p>Eines der ersten Dinge, die ich in der Vergangenheit getan habe, war, WordPress lokal zu entwickeln (e.g. &lt;a href="https://www.smashingmagazine.com/2018/04/wordpress-local-development-beginners-setup-deployment/">siehe diesen AWS-Beitrag&lt;/a>), und dann einfach das Ergebnis auf einem Server veröffentlichen. Die Programmier- und Schreibgeschwindigkeit ist enorm gestiegen., aber das Hochladen erwies sich als Problem, da WordPress-Links in der Regel in der verwendeten SQL-Datenbank \fest verdrahtet\ sind. Das bedeutet, dass sich alle meine Links auf \https://www\ bezogen haben..datafotress.Cloud\ (Arbeitsplatz) anstelle der Zieldomäne. Es gibt Möglichkeiten, dieses Problem zu lösen, wie das Umschreiben Ihrer URLs in SQL, oder die Verwendung von htaccess-Regeln zum Umschreiben der \alten\ URLs auf die \neuen\ URLs, aber dennoch, es war sehr mühsam, in Gang zu kommen.&lt;/p>
&lt;h2 id="idee-2-online-entwicklung-mit-ausgelagerten-mediendateien">Idee 2: Online-Entwicklung mit ausgelagerten Mediendateien&lt;/h2>
&lt;p>Das Problem der URL-Umschreibung ging mir sehr schnell auf die Nerven, und die lokale Entwicklung ist schlecht für mehrere Entwickler. Deshalb habe ich beschlossen, wieder \online\ zu gehen., und arbeiten \mit der Wolke. Die von mir verfolgte Architektur bestand darin, einen Entwicklungsserver einzusetzen, die nur für Entwickler zugänglich ist, und zum Hochladen von Mediendateien auf einen gemeinsam genutzten Speicher (AWS S3), von dem die Endbenutzer die Mediendateien abrufen. Als Mediendateien (Bilder, Videos, &amp;hellip;) sind die anspruchsvollsten Teile von WordPress, Geschwindigkeit drastisch erhöht, und zusätzlich, es war einfach, ein CDN darauf einzurichten, was im Grunde bedeutet, dass die Mediendateien in der ganzen Welt mit unbegrenzter Kapazität bereitgestellt werden (im Grunde serverlos). Dies bedeutet, dass ein Nutzer in e.g. Puerto Rico muss nicht auf meinen Server in Frankfurt zugreifen, hat aber eine \lokale\ Kopie in seiner Nähe. Zusätzlich, da der \schwere\ Teil von WordPress \outgesourct\ wurde, nur \kleine\ Server wurden benötigt, um PHP-Anfragen und die \Back-Office-Teile von WordPress zu bearbeiten. Du kannst mich gerne in den Kommentaren oder per Direktnachricht fragen., oder &lt;a href="https://devops.com/hosting-skalierbar-wordpress-auf-aws/">sehen Sie sich einen ähnlichen Ansatz von AWS an&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://datafortress.cloud/images/blog/Webp.net-resizeimage.png" alt="Architektur für wordpress auf AWS">&lt;/p>
&lt;p>Zusammen mit Autoscaling, dies schien die idealste Einstellung für WordPress zu sein, und es erwies sich als großartig. BUT&amp;hellip;&lt;/p>
&lt;p>Sie müssen noch nach Plugin-Updates suchen, Sicherheit, und Überwachung im Allgemeinen. Auch wenn AWS viel dazu beiträgt, dass diese Architektur sehr robust und schnell ist, es besteht weiterhin eine hohe operative Nachfrage. Zusätzlich, Durchführung einer separaten Entwicklung, Datenbank, Lastausgleich, und so weiter auf dem Server kann recht kostspielig sein, insbesondere für eine Website, die nicht viele Nutzer hat.
Und was hat Werner Vogels auf der re:invent 2015 gesagt?&lt;/p>
&lt;blockquote>
&lt;p>*&lt;em>\Kein Server ist leichter zu verwalten als kein Server *&lt;/em>&lt;/p>
&lt;p>Werner Vogels auf der re:invent 2015&lt;/p>
&lt;/blockquote>
&lt;h2 id="exkursion-eine-kurze-geschichte-des-code-of-web">Exkursion: Eine kurze Geschichte des Code of Web&lt;/h2>
&lt;p>WordPress ist ideal für Autoren und Redakteure, aber aus der Sicht eines Lösungsarchitekten ist es nicht großartig. Und warum? Auch wenn alles anklickbar ist, leicht zu handhaben, und so weiter, alle Ressourcen und Informationen werden im Hintergrund aus einer Datenbank bezogen, auch wenn es zum 100000sten Mal an diesem Tag gezogen wird. Es gibt Methoden zur Verringerung der Abfragelast auf SQL-Datenbanken, wie Redis und Memcached, aber warum sollte ich für jeden einzelnen Nutzer die gleiche Webseite \berechnen? \Früher, Websites luden in Sekundenschnelle (es sei denn, jemand hat telefoniert) und sie waren super klein - was hat sich geändert? Zusammen mit neuen Design-Anforderungen, die heutigen Websites sind voll von Effekten und Designs, die viel Rechenleistung erfordern. Auch wenn dies definitiv eine Verbesserung gegenüber dem Schwarz-Weiß-Stil der 90er Jahre ist, die Ladezeiten von Websites haben sich dramatisch verlängert - zumal der weltweite Verbindungsstandard immer noch das Mobilfunknetz ist.&lt;/p>
&lt;p>Um alle Effekte wiederzugeben, PHP-Code wird im Hintergrund verwendet, Code, der auf dem Server selbst ausgeführt wird. Das bedeutet, dass jedes Mal, wenn ein Nutzer eine Verbindung zu einer Website herstellt, der Server berechnet die Website, die er dem Nutzer anzeigen wird. In den 90er Jahren bestand die Website nur aus einfachem HTML-Code., die im Grunde einfache Anweisungen an den Browser sind, wie er Dinge zu behandeln hat. So wie der &lt;!-- raw HTML omitted -->-Tag dem Browser mitteilt, dass dies eine Überschrift ist, und &lt;!-- raw HTML omitted --> ist ein Absatz. Es sind keine (Entschuldigung für die Reduzierung der Komplexität!) Berechnungen erforderlich..&lt;/p>
&lt;p>Zusätzlich, Javascript und CSS gehen einen ähnlichen Weg, da CSS das Design in einem ähnlichen Ansatz wie HTML beschreibt, und Javascript wird nicht auf dem Server ausgeführt, sondern auf der Client-Seite. Das bedeutet, dass der Server sich nicht selbst berechnet, sondern \sendet Anweisungen\ an den Browser des Kunden (e.g. Ihr Telefon).&lt;/p>
&lt;p>Warum verwenden wir also nicht einfach HTML, Javascript, und CSS? Mit PHP können wir viele Dinge tun, und Frameworks zur Erstellung von Inhalten wie WordPress machen uns das Leben leichter. Aber die effizienteste Art, Websites zu produzieren, wäre, sie einmal zu erstellen und sie dann einfach fertig gerendert an die Massen zu verteilen.&lt;/p>
&lt;h2 id="idee-4-zurück-zu-den-wurzeln">Idee 4: Zurück zu den Wurzeln&lt;/h2>
&lt;p>Will ich damit sagen, dass wir zu den schwarz-weißen HTML-Seiten der 90er Jahre zurückkehren sollten? Natürlich nicht, aber die Kombination von HTML und CSS kann großartige Ergebnisse liefern, und Javascript wird mehr und mehr in der Lage sein, Prozesse zu bewältigen, die früher nur PHP bewältigen konnte. Und wenn Berechnungen erforderlich sind, es gibt großartige neue serverlose Möglichkeiten wie AWS Lambda (in meinem Blog finden Sie einige Anwendungen von Lambda).&lt;/p>
&lt;p>Zurück zum Hauptthema, Ich habe beschlossen, meinen Blog und alle künftigen Websites in einfachem HTML zu schreiben., CSS, und JS, da ich es nicht nötig habe&lt;/p>
&lt;ol>
&lt;li>&lt;strong>einen Server verwalten&lt;/strong> - ich kann ihn einfach fast kostenlos auf Github oder AWS S3 hosten&lt;/li>
&lt;li>&lt;strong>Sorgen Sie sich um hohe Anforderungen&lt;/strong> - S3 und Github skalieren automatisch, das heißt, wenn Tausende von Besuchern auf meiner Website eintreffen, wird mein Server nicht zusammenbrechen
viel bezahlen - da ich nicht so viele Berechnungen brauche wie bei WordPress, Der Betrieb dieses Blogs ist völlig kostenlos&lt;/li>
&lt;li>&lt;strong>Sie brauchen sich keine Sorgen um Sicherheitsprobleme zu machen&lt;/strong> - mein Blog ist im Grunde unhackbar&lt;/li>
&lt;/ol>
&lt;p>Zusätzlich, die Website ist rasend schnell, mit einer Google Pagespeed-Bewertung von 100%, was auch einen großen Einfluss auf das Page Ranking hat, da Google Hochgeschwindigkeits-Websites bevorzugt. Der einzige Grund, warum der aktuelle Punktestand bei 90 % liegt, ist, ist, dass ich beschlossen habe, CRM- und Tracking-Tools in meinen Blog aufzunehmen. Wann haben Sie das letzte Mal gesehen, dass eine kostenlose Website diese Punktzahl erreicht hat?&lt;/p>
&lt;p>Alles in allem, es ist einfach großartig, aber schreibe ich den gesamten HTML-Code selbst?&lt;/p>
&lt;h2 id="wir-stellen-vor-statische-website-generatoren">Wir stellen vor: Statische Website-Generatoren&lt;/h2>
&lt;p>Natürlich nicht, und zum Glück gibt es großartige Tools, die das für mich erledigen. Statische Website-Baukästen wie &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a> oder &lt;a href="https://gohugo.io/">Hugo&lt;/a> hilft Ihnen dabei, Ihre Texte in Markdown (im Grunde eine einfache Textdatei) zu schreiben und in HTML und eine schöne Website umzuwandeln.. Der Code wird nur einmal berechnet und kann auf einen Server hochgeladen werden, oder Github-Seiten und AWS S3 sofort vollständig serverlos sein. &lt;a href="https://datafortress.cloud/project/serverless-static-website/">Wie funktioniert das? Eine ausführliche Erklärung finden Sie in meinen Fallstudien in meinem Blog&lt;/a>.&lt;/p>
&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;p>Es ist ein tolles Gefühl, sich keine Gedanken über die Betriebszeit machen zu müssen, Skalierung, und Sicherheit nicht mehr. Ist es schwieriger als WordPress? Das kommt darauf an. Da sich diese Technologie gerade entwickelt, es muss ein Umdenken stattfinden, wenn Sie in der Vergangenheit mit WordPress und anderen gearbeitet haben, aber auch hier gibt es viele großartige Tools, die statische Website-Builder ähnlich der \bekannten\ WordPress-Umgebung erstellen, wie Forstwirtschaft.io zum Beispiel. Wie? &lt;a href="https://datafortress.cloud/project/serverless-static-website/">Besuchen Sie meinen Blog unter www.datafortress.Cloud, um die ausführliche Erklärung zu sehen&lt;/a>.
Im Moment, Es würde mich interessieren, ob Sie jemals versucht haben, serverlos zu arbeiten., oder wie Ihre Erfahrungen mit WordPress sind. &lt;a href="https://datafortress.cloud/kontakt/">Schicken Sie mir eine Nachricht, oder schreiben Sie einen Kommentar unten&lt;/a>.&lt;/p></description></item><item><title>Von Wordpress zu serverlosen, unhackbaren statischen Hochgeschwindigkeits-Webseiten</title><link>https://datafortress.cloud/de/blog/wordpress-zu-serverlos-unhackbare-webseite/</link><pubDate>Tue, 17 May 2022 11:10:07 +0600</pubDate><author>Justin Guese</author><guid>https://datafortress.cloud/de/blog/wordpress-zu-serverlos-unhackbare-webseite/</guid><description>
&lt;h1 id="von-wordpress-zu-serverlosen-unhackbaren-statischen-hochgeschwindigkeits-websites">Von Wordpress zu serverlosen, unhackbaren statischen Hochgeschwindigkeits-Websites&lt;/h1>
&lt;p>Ich habe in der Vergangenheit Websites erstellt, aber immer mit der langsamen Leistung von WordPress zu kämpfen gehabt. Wenn es mit Plugins geladen ist, wird es ziemlich viele Ressourcen benötigen und kann eine Qual sein, wenn Sie gerade eine Idee auf einem kleinen Server entwickeln.&lt;/p>
&lt;p>Darüber hinaus ist auch die Sicherheit ein Thema, und als ein System, das &lt;a href="https://en.wikipedia.org/wiki/WordPress">33,6% der Websites benutzen&lt;/a>, ist es für Hacker recht attraktiv, Exploits und andere Probleme darin zu finden.
Aber wie gesagt, da es massiv populär ist, gibt es fast jedes Mal ein Plugin für die Probleme, die Sie haben, wodurch es einfach zu benutzen ist, und ein großartiges &amp;ldquo;All-in-one&amp;rdquo;-Tool.&lt;/p>
&lt;h2 id="idee-1-verbesserung-der-wordpress-entwicklung">Idee 1: Verbesserung der WordPress-Entwicklung&lt;/h2>
&lt;p>Eines der ersten Dinge, die ich in der Vergangenheit getan habe, war, WordPress lokal zu entwickeln (z.B. &lt;a href="https://www.smashingmagazine.com/2018/04/wordpress-local-development-beginners-setup-deployment/">siehe diesen AWS-Post&lt;/a>), und dann einfach das Ergebnis auf einem Server zu veröffentlichen. Die Programmier- und Schreibgeschwindigkeiten stiegen enorm an, aber der Teil des Hochladens erwies sich als ein Problem, da WordPress-Links normalerweise fest mit der verwendeten SQL-Datenbank &amp;ldquo;verdrahtet&amp;rdquo; sind. Das bedeutet, dass alle meine Links auf &amp;ldquo;&lt;a href="https://www.datafotress.cloud">https://www.datafotress.cloud&lt;/a>&amp;rdquo; (Mein Computer) und nicht auf die Zieldomäne verwiesen. Es gibt Möglichkeiten, dies zu lösen, wie z.B. das Neuschreiben Ihrer URLs in SQL oder die Verwendung von neu geschriebenen htaccess-Regeln, um &amp;ldquo;alte&amp;rdquo; URLs auf die &amp;ldquo;neuen&amp;rdquo; zu verweisen, aber es war trotzdem sehr schwierig, den Anfang zu machen.&lt;/p>
&lt;h2 id="idee-2-online-entwicklung-mit-entladenen-mediendateien">Idee 2: Online-Entwicklung mit entladenen Mediendateien&lt;/h2>
&lt;p>Dieses Problem der URL-Umschreibung ging mir sehr schnell auf die Nerven, und die lokale Entwicklung ist schlecht für mehrere Entwickler. Deshalb beschloss ich, wieder &amp;ldquo;online zu gehen&amp;rdquo; und &amp;ldquo;mit der Cloud&amp;rdquo; zu arbeiten. Die Architektur, der ich gefolgt bin, bestand darin, einen Entwicklungsserver bereitzustellen, der nur für Entwickler zugänglich ist, und Mediendateien auf einen gemeinsamen Speicher (AWS S3) hochzuladen, von dem die Endbenutzer die Mediendateien abrufen. Da Mediendateien (Bilder, Videos, &amp;hellip;) die anspruchsvollsten Teile von WordPress sind, hat sich die Geschwindigkeit drastisch erhöht, und zusätzlich war es einfach, ein CDN darüber einzurichten, was im Grunde bedeutet, dass die Mediendateien weltweit mit unbegrenzter Kapazität (im Grunde serverlos) bereitgestellt werden. Das bedeutet, dass ein Benutzer in z.B. Puerto Rico nicht auf meinen Server in Frankfurt zugreifen muss, sondern eine &amp;ldquo;lokale&amp;rdquo; Kopie in seiner Nähe hat. Da außerdem der &amp;ldquo;schwere&amp;rdquo; Teil von WordPress &amp;ldquo;ausgelagert&amp;rdquo; wurde, wurden nur &amp;ldquo;kleine&amp;rdquo; Server benötigt, um PHP-Anfragen und die &amp;ldquo;Back-Office&amp;rdquo;-Teile von WordPress zu bearbeiten. Bitte zögern Sie nicht, mich in den Kommentaren oder einer direkten Nachricht mehr darüber zu fragen, oder &lt;a href="https://devops.com/hosting-scalable-wordpress-on-aws/">sehen Sie sich einen ähnlichen Ansatz von AWS an&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://datafortress.cloud/images/blog/Webp.net-resizeimage.png" alt="Architektur für WordPress auf AWS">&lt;/p>
&lt;p>Zusammen mit Autoscaling schien dies das ideale Setup für WordPress zu sein, und es erwies sich als großartig. ABER&amp;hellip;&lt;/p>
&lt;p>Sie mussten noch nach Plugin-Updates, Sicherheit und Überwachung im Allgemeinen suchen. Auch wenn AWS viel dazu beiträgt, diese Architektur recht belastbar und schnell zu machen, gibt es immer noch einen hohen operativen Bedarf. Außerdem kann der Betrieb einer separaten Entwicklung, Datenbank, Lastverteilung usw. auf dem Server ziemlich teuer sein, besonders für eine Website, die nicht viele Benutzer hat.
Und was hat Werner Vogels bei re:invent 2015 gesagt?&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>&amp;ldquo;Kein Server ist einfacher zu verwalten als kein Server &amp;ldquo;&lt;/strong>&lt;/p>
&lt;p>Werner Vogels bei re:invent 2015&lt;/p>
&lt;/blockquote>
&lt;h2 id="exkursion-eine-kurze-geschichte-des-codes-vom-netz">Exkursion: Eine kurze Geschichte des Codes vom Netz&lt;/h2>
&lt;p>WordPress ist großartig für Autoren und Redakteure, aber aus der Perspektive eines Lösungsarchitekten ist es nicht großartig. Warum? Obwohl alles anklickbar, einfach zu handhaben usw. ist, werden alle Ressourcen und Informationen aus einer Datenbank im Hintergrund abgerufen, auch wenn sie an diesem Tag zum 100000sten Mal abgerufen wird. Es gibt Methoden, um die Abfragelast auf SQL-Datenbanken zu reduzieren, wie Redis und Memcached, aber warum sollte ich für jeden einzelnen Benutzer dieselbe Webseite &amp;ldquo;berechnen&amp;rdquo;? &amp;ldquo;Früher wurden Webseiten in Sekundenschnelle geladen (es sei denn, jemand war am Telefon) und sie waren superklein - was hat sich geändert? Zusammen mit den neuen Design-Anforderungen sind die heutigen Websites voller Effekte und Designs, die die Rechenressourcen stark beanspruchen. Auch wenn dies definitiv eine Verbesserung gegenüber dem Schwarz-Weiß-Stil der 90er Jahre darstellt, haben die Ladezeiten von Websites dramatisch zugenommen - zumal der weltweite Verbindungsstandard nach wie vor das Mobilfunknetz ist.&lt;/p>
&lt;p>Um alle Effekte zu rendern, wird im Hintergrund PHP-Code verwendet, also Code, der auf dem Server selbst ausgeführt wird. Das heißt, jedes Mal, wenn ein Benutzer eine Verbindung zu einer Website herstellt, berechnet der Server die Website, die er dem Benutzer zeigen wird. Die 90er-Jahre-Version von Websites enthielt nur einfachen HTML-Code, bei dem es sich im Grunde um einfache Anweisungen an den Browser handelt, wie die Dinge zu handhaben sind. Wie der &lt;!-- raw HTML omitted -->-Tag dem Browser mitteilt, ist dies eine Überschrift, und &lt;!-- raw HTML omitted --> ist ein Absatz. Es sind keine (sorry für die Reduzierung der Komplexität!) Berechnungen erforderlich.&lt;/p>
&lt;p>Außerdem gehen Javascript und CSS einen ähnlichen Weg, da CSS das Design in einem ähnlichen Ansatz wie HTML beschreibt und Javascript nicht auf dem Server, sondern auf der Client-Seite ausgeführt wird. Das heißt, der Server berechnet sich nicht selbst, sondern &amp;ldquo;sendet Anweisungen&amp;rdquo; an den Browser des Clients (z.B. Ihr Telefon).&lt;/p>
&lt;p>Warum verwenden wir also nicht einfach HTML, Javascript und CSS? Mit PHP können wir viele Dinge tun, und es ermöglicht uns die Erstellung von Frameworks zur Inhaltserstellung wie WordPress, um uns das Leben zu erleichtern. Aber der effizienteste Weg, Webseiten zu erstellen, wäre, sie einmal zu generieren und dann einfach die bereits gerenderten Seiten an die Massen zu verteilen.&lt;/p>
&lt;h2 id="idee-4-rückbesinnung-auf-die-wurzeln">Idee 4: Rückbesinnung auf die Wurzeln&lt;/h2>
&lt;p>Sage ich also, dass wir zu den schwarz-weißen HTML-Seiten der 90er Jahre zurückkehren sollten? Natürlich nicht, aber die Kombination von HTML und CSS kann großartige Ergebnisse erzielen, und Javascript wird immer mehr in der Lage, Prozesse zu verarbeiten, die früher nur PHP beherrschte. Und wenn Berechnungen erforderlich sind, gibt es großartige neue serverlose Möglichkeiten wie AWS Lambda (in meinem Blog finden Sie einige Anwendungen von Lambda).&lt;/p>
&lt;p>Um zum Hauptthema zurückzukommen, habe ich beschlossen, meinen Blog und alle zukünftigen Websites in einfachem HTML, CSS und JS zu schreiben, da ich nicht&lt;/p>
&lt;ol>
&lt;li>&lt;strong>einen Server managen&lt;/strong> - Ich kann ihn einfach fast kostenlos auf Github oder AWS S3 hosten&lt;/li>
&lt;li>&lt;strong>sich um hohe Anforderungen kümmern&lt;/strong> - S3 und Github skalieren automatisch, d.h. wenn Tausende von Besuchern auf meine Website kommen, stürzt mein Server nicht ab
viel bezahlen - da ich nicht so viele Berechnungen wie bei WordPress benötige, ist der Betrieb dieses Blogs völlig kostenlos&lt;/li>
&lt;li>&lt;strong>Sie müssen sich keine Sorgen über Sicherheitsfragen machen&lt;/strong> - mein Blog ist im Grunde unhackbar&lt;/li>
&lt;/ol>
&lt;p>Darüber hinaus ist die Website blitzschnell, mit einem Google Pagespeed-Score von 100%, was sich auch auf das Page Ranking auswirkt, da Google Hochgeschwindigkeits-Websites bevorzugt. Der einzige Grund, warum der aktuelle Wert auf 90 % gesunken ist, ist, dass ich mich entschlossen habe, CRM- und Tracking-Tools in meinen Blog aufzunehmen. Wann haben Sie das letzte Mal gesehen, dass eine kostenlose Website diesen Wert erreicht hat?&lt;/p>
&lt;p>Alles in allem ist sie einfach großartig, aber schreibe ich den gesamten HTML-Code selbst?&lt;/p>
&lt;h2 id="darf-ich-vorstellen-statische-website-generatoren">Darf ich vorstellen: Statische Website-Generatoren&lt;/h2>
&lt;p>Natürlich nicht, und glücklicherweise gibt es für mich großartige Werkzeuge, um damit umzugehen. Statische Website-Ersteller wie &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a> oder &lt;a href="https://gohugo.io/">Hugo&lt;/a> helfen sehr dabei, dass Sie im Grunde nur die Markdown-Sprache (im Grunde eine einfache txt-Datei) eingeben und Ihre Texte in HTML und eine schöne Website umwandeln können. Der Code wird nur einmal berechnet und kann auf einen Server hochgeladen werden, oder Github-Seiten und AWS S3 sofort, um völlig serverlos zu sein. Wie funktioniert das? Schauen Sie sich meine Fallstudien in meinem Blog an, um eine ausführliche Erklärung zu erhalten.&lt;/p>
&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;p>Es ist ein tolles Gefühl, sich keine Sorgen mehr über Betriebszeit, Skalierung und Sicherheit zu machen. Ist es schwieriger als WordPress? Das hängt davon ab. Da sich diese Technologie gerade erst entwickelt, muss man umdenken, wenn man in der Vergangenheit mit WordPress und anderen gearbeitet hat, aber auch hier gibt es viele großartige Tools, die statische Website-Ersteller der &amp;ldquo;bekannten&amp;rdquo; WordPress-Umgebung ähnlich machen, wie z.B. forestry.io. Wie? Schauen Sie in meinem Blog unter &lt;a href="https://www.datafortress.cloud">www.datafortress.cloud&lt;/a> nach, um die ausführliche Erklärung zu sehen](/project/serverless-static-website/).
Im Moment würde es mich interessieren, ob Sie jemals versucht haben, serverlos zu arbeiten, oder welche Erfahrungen Sie mit WordPress gemacht haben. &lt;a href="https://datafortress.cloud/de/contact/">Schießen Sie mir eine Nachricht, oder schreiben Sie unten einen Kommentar&lt;/a>&lt;/p></description></item><item><title>Wie man 3D-Modelle in Websites und Schnellansichten für Android und iOS integriert</title><link>https://datafortress.cloud/de/blog/3d-model-integration/</link><pubDate>Thu, 24 Feb 2022 11:10:07 +0600</pubDate><author>Justin Guese</author><guid>https://datafortress.cloud/de/blog/3d-model-integration/</guid><description>
&lt;p>&lt;strong>Probieren Sie es aus:&lt;/strong> Drehen Sie das 3D-Objekt unten, oder betrachten Sie es in AR mit Ihrem Telefon oder sogar in VR, wenn ein VR-Glas an Ihren Computer angeschlossen ist.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Augmented Reality wurde durch die Veröffentlichung einer Funktion namens ar webview (Quick View in iOS) nun einfacher.&lt;/p>
&lt;p>Mit nur wenigen Zeilen Code ist es möglich, 3D-Objekte in Ihre Websites zu integrieren, die bereit sind, auf der Website zu interagieren, mobile Geräte mit AR-Unterstützung (d.h. Sie können die Objekte in Ihrem Raum platzieren) und sogar Unterstützung für Virtual Reality. Wenn Sie diese Website auf einen Computer laden, an den ein VR-Headset angeschlossen ist, sollte er Ihnen eine Möglichkeit zeigen, dieses Objekt in VR zu betrachten.&lt;br>
Sie unterstützt sogar Magic Leap!&lt;/p>
&lt;p>Um die notwendigen Skripte zu laden, laden Sie einfach den folgenden Code in Ihren Bereich der Website:&lt;/p>
&lt;pre>&lt;code>&amp;lt;script type=&amp;quot;module&amp;quot;
src=&amp;quot;https://unpkg.com/@google/model-viewer/dist/model-viewer.js&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;!-- Loads &amp;lt;model-viewer&amp;gt; for old browsers like IE11: --&amp;gt;
&amp;lt;script nomodule
src=&amp;quot;https://unpkg.com/@google/model-viewer/dist/model-viewer-legacy.js&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;!-- The following libraries and polyfills are recommended to maximize browser support --&amp;gt;
&amp;lt;!-- NOTE: you must adjust the paths as appropriate for your project --&amp;gt;
&amp;lt;!-- 🚨 REQUIRED: Web Components polyfill to support Edge and Firefox &amp;lt; 63 --&amp;gt;
&amp;lt;script src=&amp;quot;https://unpkg.com/@webcomponents/webcomponentsjs@2.1.3/webcomponents-loader.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- 💁 OPTIONAL: Intersection Observer polyfill for better performance in Safari and IE11 --&amp;gt;
&amp;lt;script src=&amp;quot;https://unpkg.com/intersection-observer@0.5.1/intersection-observer.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- 💁 OPTIONAL: Resize Observer polyfill improves resize behavior in non-Chrome browsers --&amp;gt;
&amp;lt;script src=&amp;quot;https://unpkg.com/resize-observer-polyfill@1.5.1/dist/ResizeObserver.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- 💁 OPTIONAL: Fullscreen polyfill is required for experimental AR features in Canary --&amp;gt;
&amp;lt;!--&amp;lt;script src=&amp;quot;https://unpkg.com/fullscreen-polyfill@1.0.2/dist/fullscreen.polyfill.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
&amp;lt;!-- 💁 OPTIONAL: Include prismatic.js for Magic Leap support --&amp;gt;
&amp;lt;!--&amp;lt;script src=&amp;quot;https://unpkg.com/@magicleap/prismatic@0.18.2/prismatic.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;a href="https://gist.github.com/JustinGuese/6c2bd61252ac9947ce686928bc2bcb6e/raw/20ea3fc0de030ed04f09d44db0d0d11ae8b69781/3D%20Content%20with%20Webview">&lt;strong>view raw&lt;/strong>&lt;/a>&lt;a href="https://gist.github.com/JustinGuese/6c2bd61252ac9947ce686928bc2bcb6e#file-3d-content-with-webview">&lt;strong>3D Content with Webview&lt;/strong>&lt;/a> hosted with ❤ by &lt;a href="https://github.com/">&lt;strong>GitHub&lt;/strong>&lt;/a>&lt;/p>
&lt;p>Danach brauchen Sie nur noch das Modell mit dem folgenden Snippet zu laden und das Modell in Ihres zu ändern.&lt;/p>
&lt;p>Zu Demonstrationszwecken ist [&amp;ldquo;Rocket Ship&amp;rdquo; von Google Poly] (&lt;a href="https://poly.google.com/view/42PQqEaxb-P">https://poly.google.com/view/42PQqEaxb-P&lt;/a>) enthalten.&lt;/p>
&lt;p>Der Code wurde übernommen und geändert von&lt;a href="https://github.com/Kristina-Simakova/ar-webview"> &lt;/a>&lt;a href="https://github.com/Kristina-Simakova/ar-webview" title="https://github.com/Kristina-Simakova/ar-webview">https://github.com/Kristina-Simakova/ar-webview&lt;/a>&lt;/p>
&lt;pre>&lt;code>&amp;lt;model-viewer src=&amp;quot;assets/RocketShip_1393.gltf&amp;quot;
ios-src=&amp;quot;assets/RocketShip_1393.usdz&amp;quot;
ar
auto-rotate
camera-controls
shadow-intensity=&amp;quot;1&amp;quot;
alt=&amp;quot;A 3D model of a rocket&amp;quot; background-color=&amp;quot;#70BCD1&amp;quot;&amp;gt;
&amp;lt;/model-viewer&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;a href="https://gist.github.com/JustinGuese/6b119644e4d1a640dd054c5b0a18b62c/raw/448cab85deae1d24978a65a6955573d90f5b8122/3D%20Content%20with%20Webview%20-%20modelload">&lt;strong>view raw&lt;/strong>&lt;/a>&lt;a href="https://gist.github.com/JustinGuese/6b119644e4d1a640dd054c5b0a18b62c#file-3d-content-with-webview-modelload">&lt;strong>3D Content with Webview - modelload&lt;/strong>&lt;/a> hosted with ❤ by &lt;a href="https://github.com/">&lt;strong>GitHub&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.datafortress.cloud/de/contact/">Sie haben eine ähnliche Idee oder wir haben Ihr Interesse geweckt? Kontaktieren Sie uns jetzt für eine gratis 15-minütige Beratung!&lt;/a>&lt;/p></description></item></channel></rss>