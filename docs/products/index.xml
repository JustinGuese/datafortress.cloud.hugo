<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Products on Datafortress.cloud</title><link>https://datafortress.cloud/products/</link><description>Recent content in Products on Datafortress.cloud</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor/><webMaster/><lastBuildDate>Tue, 12 Jul 2022 17:02:17 +0200</lastBuildDate><atom:link href="https://datafortress.cloud/products/index.xml" rel="self" type="application/rss+xml"/><item><title>AIStockpricePrediction</title><link>https://datafortress.cloud/products/aistockpriceprediction/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/products/aistockpriceprediction/</guid><description>
&lt;h1 id="aistockpriceprediction">AIStockpricePrediction&lt;/h1>
&lt;p>&lt;a href="https://aistockpriceprediction.com/">https://aistockpriceprediction.com/&lt;/a>&lt;/p>
&lt;p>AIStockpricePrediction.com is my &amp;ldquo;front end&amp;rdquo; to visualize my private trading ideas and algorithms. A Kubernetes job runs daily, which &amp;ldquo;chases&amp;rdquo; all SPY500 stocks through my microservice architecture (FastAPI, TensorFlow, LSTMs, Sklearn), and then saves the results in Markdown format. GoHugo (static website generator) then converts them to HTML, and the Kubernetes job then uploads them to GitHub, where they are transferred to the GitHub Pages by GitHub Actions.&lt;/p></description></item><item><title>DeFi/Web3: Kingdom Game</title><link>https://datafortress.cloud/products/web3-kingdom/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/products/web3-kingdom/</guid><description>
&lt;h1 id="defiweb3-kingdom-game">DeFi/Web3: Kingdom Game&lt;/h1>
&lt;p>&lt;a href="https://github.com/JustinGuese/solidity-kingdom-game">https://github.com/JustinGuese/solidity-kingdom-game&lt;/a>&lt;/p>
&lt;p>I wrote a Web3 game that simulates a kingdom and acts as a pool at the same time. Users can buy &amp;ldquo;seedcoin&amp;rdquo; and &amp;ldquo;plant&amp;rdquo; them, after which they can &amp;ldquo;harvest&amp;rdquo; the seeds after a locking period to buy new combat or defense units. Should you successfully fight their &amp;ldquo;boss&amp;rdquo;, they will move up in the rankings. The ranking is realized by NFTs, and the &amp;ldquo;higher&amp;rdquo; a NFT is in the ranking, the more profit from the pooling reward is distributed to the NFTs. The software is written in solidity (ETH chain) and React (JS).&lt;/p></description></item><item><title>EasyCloud</title><link>https://datafortress.cloud/products/easycloud/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/products/easycloud/</guid><description>
&lt;h1 id="easycloud">EasyCloud&lt;/h1>
&lt;p>&lt;a href="https://easycloudhost.de/">https://easycloudhost.de/&lt;/a>&lt;/p>
&lt;p>Here I offer my own Function-as-a-service (FAAS) and managed Kubernetes (EasyKube). Most of it is based on FastAPI (Python) microservices that drive the BareMetal Kubernetes cluster on Hetzner servers (see &amp;ldquo;Buchinger Wilhelmi&amp;rdquo;).&lt;/p>
&lt;h2 id="run-your-apps-without-worrying-about-compliance-or-servers">Run Your Apps Without Worrying About Compliance Or Servers&lt;/h2>
&lt;p>Our EasyServices are allowing you to focus on what is important for your business. Leave speed and compliance to us, and focus on gaining more revenue with your core-business.&lt;/p></description></item><item><title>Myopiagraph</title><link>https://datafortress.cloud/products/myopiagraph/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/products/myopiagraph/</guid><description>
&lt;h1 id="myopiagraph">Myopiagraph&lt;/h1>
&lt;p>&lt;a href="https://myopiagraph.com/">https://myopiagraph.com/&lt;/a>&lt;/p>
&lt;p>A software which is used in 50 ophthalmic practices in Bavaria to visualize myopia in children. It is a medical software, and therefore complies with EU and German regulations for &amp;ldquo;medical software&amp;rdquo;.
User authentication works using AWS Cognito, which is terminated in Kubernetes Ingress using oauth2-proxy (Go), and then forwarded to the FastAPI (Python) backend, which in this case also provides the frontend. Certificates are automatically ordered and managed by LetsEncrypt using the Cert-Manager. Backups are done via Velero Backup to Storj.&lt;/p></description></item><item><title>Open Source: Pandas to_sql</title><link>https://datafortress.cloud/products/pandas/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/products/pandas/</guid><description>
&lt;h1 id="open-source-pandas-to_sql">Open Source: Pandas to_sql&lt;/h1>
&lt;p>&lt;a href="https://github.com/pandas-dev/pandas/pull/48331">https://github.com/pandas-dev/pandas/pull/48331&lt;/a>&lt;/p>
&lt;p>Pandas is one of the most used data science libraries in Python, and I have been working with others on the &amp;ldquo;to_sql&amp;rdquo; function for some time. Currently this is only capable of writing a Pandas dataframe to a SQL database if entries of it are new. If there is already an entry in the database, an error is thrown. The new functionality will allow an upsert, and offers different options (on duplicate -&amp;gt; error / replace / keep database).
The tests for Pandas are very strict, and the code must work on ARM, AMD, etc., so the PR drags on forever.&lt;/p></description></item><item><title>Tradingbots</title><link>https://datafortress.cloud/products/tradingbots/</link><pubDate>Tue, 12 Jul 2022 17:02:17 +0200</pubDate><author/><guid>https://datafortress.cloud/products/tradingbots/</guid><description>
&lt;h1 id="tradingbots">Tradingbots&lt;/h1>
&lt;p>I have been developing trading bots for some time, and have written backtest software on a private Kubernetes cluster that simulates a real market environment. As soon as I have developed a new &amp;ldquo;bot theory&amp;rdquo;, it will be tested. The current test has been running for 13 months, and initial candidates are promising.
Some bot ideas can be seen at &lt;a href="https://aistockpriceprediction.com/">https://aistockpriceprediction.com/&lt;/a>, as well as in some posts I have published:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://guese-justin.medium.com/enhancing-stock-data-for-your-python-algorithmic-trading-model-b40c668e4087">https://guese-justin.medium.com/enhancing-stock-data-for-your-python-algorithmic-trading-model-b40c668e4087&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://guese-justin.medium.com/using-sklearns-decision-trees-to-form-simple-trading-decisions-for-trading-bots-5da2f2123744">https://guese-justin.medium.com/using-sklearns-decision-trees-to-form-simple-trading-decisions-for-trading-bots-5da2f2123744&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://towardsdatascience.com/how-to-deploy-an-automated-trading-bot-using-the-facebook-prophet-machine-learning-model-to-aws-1182c603e280">https://towardsdatascience.com/how-to-deploy-an-automated-trading-bot-using-the-facebook-prophet-machine-learning-model-to-aws-1182c603e280&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>